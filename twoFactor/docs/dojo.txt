Currently on dojo 1.8.3

########################################################
0. Filtering select format:

{ 
  "identifier": "id", 
  "items": [ 
    { 
      "id": "10021368", 
      "name": "Some display label" 
    }, 
    { 
      "id": "10021369", 
      "name": "Some other label" 
    } 
  ], 
  "label": "name" 
}

#########################################################
1. To make an alert show errors with the filtering select (so they arent swallowed), I used this patch: 

QueryReadStore.js.uncompressed.js line 211  (add the alert), then copy the uncompressed version to the compressed one.

FROM: 

      var _errorHandler = function(errorData, requestObject){ 
              if(requestObject.onError){ 
                      var scope = requestObject.scope || dojo.global; 
                      requestObject.onError.call(scope, errorData, requestObject); 
              } 
      }; 

TO: 

      var _errorHandler = function(errorData, requestObject){ 
        if(requestObject.onError){ 
          if (errorData.name != "CancelError") {
            alert("error communicating with server");
          }
          var scope = requestObject.scope || dojo.global; 
          requestObject.onError.call(scope, errorData, requestObject); 
        } 
      }; 

2. Do not interrupt typing: autocomplete="false"

##############################################################
3. To have a throbber

I edited the source of dojo to make this work, though it would be nice if someone could add to the release, it would be useful for others.  Note, this depends on jquery, im sure there is a way to do this dojo-only, Im just not familiar enough with it.

<nabble_img src="busy.gif" border="0"/>

Here is the HTML (data store, filtering select, and throbber image):

      <div data-dojo-type="dojox.data.QueryReadStore" id="personPickerStoreId"
        data-dojo-props="url:'../twoFactorUi/app/UiMain.personPicker'" data-dojo-id="personPickerStoreDojoId"></div>
      <span style="font-size: 0.9em">Enter search text to find a person:</span><br />
        <input id="personPickerId" name="personPickerName"  searchDelay="500" value="10021368"
          data-dojo-props="store:personPickerStoreDojoId" class="soria" style="width: 40em"
          autoComplete="false" data-dojo-type="dijit/form/FilteringSelect" hasDownArrow="false" /><!-- 
           -18 for no down arrow, -36 for down arrow --><img 
          style="position: relative; top: 5px; left: -18px; display: none; " alt="busy..."  
          id="personPickerThrobberId"
          src="../assets/busy.gif" class="comboThrobber" />


QueryReadStore.js

Line 336:

FROM:

    _fetchItems: function(request, fetchHandler, errorHandler){
      // summary:

TO:

    _fetchItems: function(request, fetchHandler, errorHandler){
      
      //e.g. personPickerStoreId
      var storeId = this.id;
      var pickerPrefix = null;
      if (typeof storeId != "undefined" && storeId != null && storeId.match(/StoreId$/)) {
        
        //e.g. personPicker
        pickerPrefix = storeId.substring(0, storeId.length - "StoreId".length);
        
      }

      if (pickerPrefix != null) {
        //show the throbber
        $("#" + pickerPrefix + "ThrobberId").show();
      }
      

      // summary:


Line 390:

FROM:

        fetchHandler(this._items, request, this._numRows);
      }else{

TO:

        fetchHandler(this._items, request, this._numRows);

        if (pickerPrefix != null) {
          //show the throbber
          $("#" + pickerPrefix + "ThrobberId").hide();
        }

      }else{


Line 394:

FROM:

        request.abort = function(){
          xhrHandler.cancel();
        };
        xhrHandler.addCallback(dojo.hitch(this, function(data){
          this._xhrFetchHandler(data, request, fetchHandler, errorHandler);
        }));
        xhrHandler.addErrback(function(error){
          errorHandler(error, request);
        });

TO:

        request.abort = function(){
          xhrHandler.cancel();
          if (pickerPrefix != null) {
            //show the throbber
            $("#" + pickerPrefix + "ThrobberId").hide();
          }

        };
        xhrHandler.addCallback(dojo.hitch(this, function(data){
          this._xhrFetchHandler(data, request, fetchHandler, errorHandler);
          if (pickerPrefix != null) {
            //show the throbber
            $("#" + pickerPrefix + "ThrobberId").hide();
          }

        }));
        xhrHandler.addErrback(function(error){
          errorHandler(error, request);
          if (pickerPrefix != null) {
            //show the throbber
            $("#" + pickerPrefix + "ThrobberId").hide();
          }

        });


######################################################
4. Send other form elements with ajax filtering select

I changed the Query Read Store (for filtering select) to send other form element names with the ajax query.  It would be nice if dojo could offer this functionality by default.  Here is a video showing this feature.

http://youtu.be/JES32ZUtO8c

Here is the HTML to specify which form element names to submit with the URL:

      <div data-dojo-type="dojox.data.QueryReadStore" id="personPickerStoreId" formElementNamesToSend="anotherItemName"
        data-dojo-props="url:'../twoFactorUi/app/UiMain.personPicker'" data-dojo-id="personPickerStoreDojoId"></div>
      <span style="font-size: 0.9em">Enter search text to find a person:</span><br />
        <input id="personPickerId" name="personPickerName"  searchDelay="500" value="10021368"
          data-dojo-props="store:personPickerStoreDojoId" class="soria" style="width: 40em"
          autoComplete="false" data-dojo-type="dijit/form/FilteringSelect" hasDownArrow="false" />

 <input name="anotherItemName" id="anotherItemId" type="text" />

Here is the change to QueryReadStore.js

Add this function at the bottom:

/**
 * split and trim a string to an array of strings
 */
function dojoSplitTrim(input, separator) {
 if (input == null) {
   return input;
  }
  //trim the string
  input = dojoTrim(input);
 if (input == null) {
   return input;
  }
  //loop through the array and trim it
 var theArray = input.split(separator);
 for(var i=0;theArray!=null && i<theArray.length;i++) {
     theArray[i] = dojoTrim(theArray[i]);
  }
  return theArray; 
}

/**
 * trim all whitespace off a string
 */
function dojoTrim(x) {
  if (!x) {
    return x;
  }
  var i = 0;
  while (i < x.length) {
    if (dojoIsWhiteSpace(x.charAt(i))) {
      i++;
    } else {
      break;
    }
  }
  if (i==x.length) {
    return "";
  }
  x = x.substring(i,x.length);
  i = x.length-1;
  while (i >= 0) {
    if (dojoIsWhiteSpace(x.charAt(i))) {
      i--;
    } else {
      break;
    }   
  }
  if (i < 0) {
    return x;
  }
  return x.substring(0,i+1);
}
function dojoIsWhiteSpace(x) {
  return x==" " || x=="\n" || x=="\t" || x=="\r";
}



Then change QueryReadStore.js

Line 391:

FROM:
        var xhrFunc = this.requestMethod.toLowerCase() == "post" ? dojo.xhrPost : dojo.xhrGet;
        var xhrHandler = xhrFunc({url:this.url, handleAs:"json-comment-optional", content:serverQuery, failOk: true});
        request.abort = function(){


TO:

        var xhrFunc = this.requestMethod.toLowerCase() == "post" ? dojo.xhrPost : dojo.xhrGet;

        var theUrl = this.url;
        
        //make the request dynamic, maybe send some other form element names
        var formElementNamesToSend = dojo.getAttr(this.id, "formElementNamesToSend");
          
        if (typeof formElementNamesToSend != 'undefined' && formElementNamesToSend != null) {
          
          //add additional form element names to filter based on other things on the screen
          var additionalFormElementNamesArray = dojoSplitTrim(formElementNamesToSend, ",");
          for (var i = 0; i<additionalFormElementNamesArray.length; i++) {
            var additionalFormElementName = additionalFormElementNamesArray[i];
            theUrl += theUrl.indexOf("?") == -1 ? "?" : "&";
            theUrl += additionalFormElementName + "=";
            //this will work for simple elements
            theUrl += encodeURIComponent(document.getElementsByName(additionalFormElementName)[0].value);
          }
        }

        
        var xhrHandler = xhrFunc({url:theUrl, handleAs:"json-comment-optional", content:serverQuery, failOk: true});
        request.abort = function(){





