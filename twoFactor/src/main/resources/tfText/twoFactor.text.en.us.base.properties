# The text config uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from the base file
# (which should not be edited), and the override overlays
# the base settings. See the twoFactor.text.en.us.base.properties for the possible
# settings that can be applied to the twoFactor.text.en.us.properties
# you can use ${' '} to put a space at start or end since values are trimmed

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:tfText/twoFactor.text.en.us.base.properties, file:c:/temp/tfText/twoFactor.text.en.us.properties
text.config.hierarchy = classpath:tfText/twoFactor.text.en.us.base.properties, classpath:tfText/twoFactor.text.en.us.properties

# seconds between checking to see if the config files are updated
text.config.secondsBetweenUpdateChecks = 60


## English language, US locale
## You can leave this file alone, and override in twoFactor.text.en.us.properties

############################################
## Common text
############################################

# SSO system name
ssoSystemName = WebLogin

# Name of the username
netId = NetID

# In H1's at the top of each page
pageHeader = $$ssoSystemName$$: $$serviceNameCap$$

# service name with first letter cap
serviceNameCap = Two-Step Verification

# service name prefix lower
serviceNamePrefixLower = Two-Step

# service name lower case
serviceNameLower = two-step verification

# override this and put your institution name here, e.g. for Penn, we put: Penn
institutionName = Open Two Factor

# url to documentation about the service
docUrl = https://my.institution.edu/twostep/

# email address for support or feedback
supportEmailAddress = twostep-help@my.instition.edu

# name of the 6 digit code
codeName = single-use verification code

# name of the 6 digit codes
codesName = single-use verification codes

# what the duo listing is for your institution
duoIntegrationListing = $$institutionName$$

# simple yes or no
yes = yes
no = no

# buttons
buttonLogOut = Log out
buttonOptOut = Unenroll
buttonOptOutConfirm = Are you sure you want to unenroll?
buttonChangeDevice = Add phone or device
buttonOptIn = Enroll now
buttonProfile = Profile
buttonGenerateCodes = Generate codes
buttonPrint = Print
buttonUntrustBrowsers = Untrust browsers
buttonUntrustBrowsersConfirm = Are you sure you want to untrust all browsers?
buttonUntrustBrowsersNone = No trusted browsers found
buttonActivity = Activity
buttonHelpFriend = Help a friend
buttonAdminConsole = Admin console
buttonAdminLiteConsole = Lite admin console
buttonManageSettings = Manage settings
buttonHavingTrouble = I am having trouble logging in
buttonContinue = Continue
buttonCancel = Cancel
buttonSubmit = Submit
buttonAdd = Add
buttonEdit = Edit
buttonAdminHome = Admin home
buttonAdminEmailAll = Email all users
buttonAdminImportSerials = Import fob serials
buttonAdminReportAdmin = Setup reports
buttonViewReports = View reports
buttonAdminReportEnrolled = Enrolled report
buttonNextStep = Next
buttonAddPushDevice = Add Duo push


# when searching in combobox, you need 2 or more characters
comboNotEnoughChars = Enter 2 or more characters for searching...

############################################
## Lite admin
############################################

# title on the lite admin page
liteAdminTitle = $$serviceNameCap$$ lite admin console

# subheader on the lite admin page
liteAdminSubheader = $$serviceNameCap$$ lite admin console

# paragraph 1 on lite admin
liteAdminParagraph1 = In order to get a one-time use code from a lite admin, a user needs to request help from a friend: [<a href="${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</a>], click "Trouble logging in" then "Authorize friends".<br /><br />This function will generate a one-time use code for the user.  They can use that one-time use code to manage their settings (e.g. add another phone number), generate more one-time use codes, or unenroll.  Note, if the user is required to enroll, then they should not unenroll unless they plan to soon re-enroll.

# assertion of checking ID for lite admin
adminLiteConfirmId = I have checked the person's photo ID and I am certain that they are who they claim to be

# disclaimer for lite admin
adminLiteDisclaimer = I understand that this utility is audited and improper use is forbidden

# submit
liteAdminSubmitButton = Generate one-time use code for user

# cant find netId
liteAdminInvalidNetId = Error: $$netId$$ is invalid or not found

# need to authenticate user
liteAdminNeedToAuthenticate = Error: you need to properly verify the identity of the user

# need to agree to the disclaimer
liteAdminNeedToDisclaimer = Error: you need to agree with the disclaimer

# if the user selected hasn't allowed friends to opt them out. Generally only hackers will see this
liteAdminErrorUserDidntAllow = Error: the user must authorize friends to unenroll them

# lite admin generate code
liteAdminCodeSuccess = Success: the user can now use this $$serviceNameCap$$ code for the next 10 minutes: <big>${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.codeForFriend}</big>

# audit message description success before name
liteAdminCodeAuditDescriptionPrefix = Generate single-use verification code by lite admin

# audit message the friend will see before name
liteAdminCodeAuditDescriptionForFriendPrefix = Generate single-use verification code for me by lite admin

############################################
## Admin reports
############################################

# title on the reports index page
adminReportsIndexTitle = $$serviceNameCap$$ administration reports index

# subheader on the reports index page
adminReportsIndexSubheader = $$serviceNameCap$$ administration reports index

# instructions on reports index page
adminReportsIndexInstructions = Select which reports part you would like to edit

# edit reports button
buttonReportsEdit = Edit reports

# edit report privileges button
buttonReportsPrivilegesEdit = Edit report privileges

# edit report privileges button
buttonReportsRollupsEdit = Edit report rollups

############################################
## Admin reports edit
############################################

# title on the reports edit page
adminReportsEditTitle = $$serviceNameCap$$ administration edit reports

# subheader on the reports edit page
adminReportsEditSubheader = $$serviceNameCap$$ administration edit reports

# instructions on reports edit page
adminReportsEditInstructions = Add, edit, or delete reports

# Columns on edit report table (or labels to insert or edit)
adminReportsEditColNameFriendly = Name
adminReportsEditColNameSystem = Key
adminReportsEditColType = Type

# edit/delete button to delete a report
adminReportsEditDeleteButton = Delete
adminReportsEditEditButton = Edit

# confirm delete of report
adminReportsEditDeleteConfirm = Are you sure you want to delete this report?

# if the report cant be found (why would this happen?)
adminReportsEditReportNotFound = Error: report not found

# cant delete report if foreign keys exist
adminReportsEditReportCantDeleteChildRollups = Error: cannot delete report since it has child rollups.  Delete those first
adminReportsEditReportCantDeleteParentRollups = Error: cannot delete report since it has parent rollups.  Delete those first
adminReportsEditReportCantDeletePrivileges = Error: cannot delete report since it has privileges.  Delete those first

# success delete
adminReportsEditReportDeleteSuccess = Success: you deleted the report

# add a new report button
adminReportsEditAddNewReport = Add new report

# report type select of group or rollup
adminReportsEditTypeGroup = Group
adminReportsEditTypeRollup = Rollup

# name system if manual
adminReportsEditOrManualNameSystem = or manual:

# added a report success
adminReportsEditAddSuccess = Success: added report
adminReportsEditEditSuccess = Success: edited report

# validations on new or edited report
adminReportsEditErrorKeySelectAndManual = Error: select a key from the select or type one in but not both
adminReportsEditErrorKeyRequired = Error: enter a key
adminReportsEditErrorNameRequired = Error: name required
adminReportsEditErrorTypeRequired = Error: type required
adminReportsEditErrorNameExists = Error: name already exists
adminReportsEditErrorKeyExists = Error: key already exists
adminReportsEditErrorGroupTypeChildExists = Error: cannot change type to group if there are rollup children for this report

############################################
## Admin reports privileges
############################################

# title on the reports privileges page
adminReportsPrivilegesTitle = $$serviceNameCap$$: Administration - reports privileges

# subheader on the reports privileges page
adminReportsPrivilegesSubheader = $$serviceNameCap$$: administration - reports privileges

# instructions on reports privileges page
adminReportsPrivilegesInstructions = Add or delete report privileges

# Columns on edit report privilege table (or labels to insert or edit)
adminReportsPrivilegesColReport = Report
adminReportsPrivilegesColUser = User

# confirm on delete privilege
adminReportsPrivilegeDeleteConfirm = Are you sure you want to delete this privilege?

# validations on new privilege
adminReportsPrivilegesErrorReportRequired = Error: select a report
adminReportsPrivilegesErrorUserRequired = Error: select a user from the search results
adminReportsPrivilegesErrorPrivilegeExists = Error: that privilege already exists

# success messages for privilege editing
adminReportsPrivilegeAddSuccess = Success: added report privilege
adminReportsPrivilegeDeleteSuccess = Success: deleted report privilege


############################################
## Admin reports rollups
############################################

# title on the reports rollups page
adminReportsRollupsTitle = $$serviceNameCap$$: Administration - reports rollups

# subheader on the reports rollups page
adminReportsRollupsSubheader = $$serviceNameCap$$: administration - reports rollups

# instructions on reports rollups page
adminReportsRollupsInstructions = Add or delete report rollups

# Columns on edit report rollups table (or labels to insert or edit)
adminReportsRollupsColParentReport = Parent report
adminReportsRollupsColChildReport = Child report

# confirm on delete rollup
adminReportsRollupsDeleteConfirm = Are you sure you want to delete this rollup?

# validations on new rollup
adminReportsRollupsErrorChildReportRequired = Error: select a child report
adminReportsRollupsErrorParentReportRequired = Error: select a parent report
adminReportsRollupsErrorRollupExists = Error: that rollup already exists
adminReportsRollupsErrorParentCantBeChild = Error: parent cannot be same as child
adminReportsRollupsErrorCircularReference = Error: that rollup would create a circular reference so it cannot be created

# success messages for rollup editing
adminReportsRollupsAddSuccess = Success: added report rollup
adminReportsRollupsDeleteSuccess = Success: deleted report rollup

############################################
## View reports
############################################

# title on the view reports page
viewReportsTitle = $$serviceNameCap$$: reports

# subheader on the reports page
viewReportsSubheader = $$serviceNameCap$$: reports

# instructions on reports page
viewReportsInstructions = View enrollment reports

# Columns/labels on view report table
viewReportsLabelReportName = Report name
viewReportsLabelSubreportName = Subreport name
viewReportsButtonViewReport = View report
viewReportsLabelTotal = Total people
viewReportsLabelNumberNotOptedIn = Total not enrolled
viewReportsLabelPercentageOptedIn = Percent enrolled
viewReportsLabelSubjectsNotOptedIn = People not enrolled

# logged in subject must be opted in and have reports to view
viewReportsErrorLoggedInSubjectNotOptedIn = Error: you must be enrolled in $$serviceNameCap$$ to see reports
viewReportsErrorLoggedInSubjectHasNoReports = Error: there are no reports you are authorized to view
viewReportsErrorReportNotFound = Error: report could not be found, select one to view

# overall stats
viewReportsOptedInUsersPrefix = Overall system enrolled users:
viewReportsOptedOutUsersPrefix = Overall system unenrolled users:

 
############################################
## Banner: commonBanner.jsp
############################################

# banner at top, url
bannerUrl = http://www.school.edu/

# switch this for your institution's image
bannerImageUrl = ../../assets/Open_Two_Factor2.gif

# alt of banner image
bannerImageAlt = University of School

# name of directory in institution
directoryName = directory

############################################
## Add phone or device page: addPhoneOrDevice.jsp
############################################

# title for add phone or device page
addPhoneOrDeviceTitle = $$serviceNameCap$$: add phone or device

# header for add phone or device
addPhoneOrDeviceSubheader = Add phone or device

# wizard question for add phone or device
addPhoneOrDeviceInstructions = Note: if you want to add a text or voice phone number to get codes when you are having trouble, <a href="UiMain.profileView">edit your profile</a>.  What would you like to add?

# button to add phone with app
addPhoneOrDevicePhoneButton = Add phone with app

# button to add a device
addPhoneOrDeviceDeviceButton = Add device (e.g. keychain fob)

# button to cancel to return to the manage settings screen
addPhoneOrDeviceCancelButton = Cancel

# confirm to add device
addPhoneOrDeviceDeviceConfirm = You cannot add a device with the same secret value with which you are currently enrolled.  To add a device, you will be unenrolled, and previously enrolled phones or devices will need to be re-enrolled (if applicable).  Are you sure you want to unenroll your current devices and proceed to enroll again?

# if user not opted in when adding phone or device
addPhoneOrDeviceNotOptedIn = You must be enrolled to add a phone or device

##############################################
## Add phone: addPhone.jsp
##############################################

# title bar in browser for addPhone screen
addPhoneTitle = $$serviceNameCap$$: add phone

# subheader for addPhone in to two factor
addPhoneSubheader = $$serviceNameCap$$: add phone

# step 1 description
addPhoneStep1description = <b>Step 1 of 3:</b> Install an authenticator app (Duo Security or Google Authenticator) on your mobile device.

# step 1 indented subdescription
addPhoneStep1substep = Once activated, your app will display a verification code that changes at frequent intervals.  

# step two header
addPhoneStep2description = <b>Step 2 of 3:</b> Activate the app(s).

# step 2 activate an app
addPhoneStep2activateApp = Activate an app

# content that shows when you click the activate an app button
addPhoneStep2activateContent = Scan the <a href="#qrCode">QR code below</a> or enter this secret value into your device:<br /><br /><b>${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretUnencryptedFormatted}</b><br />(Base32 for most authenticator apps.<br />Account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}. Select "time based".)<br /><br />Do not store this QR code or secret value anywhere except in this device.

# link to show advanced stuff
addPhoneStep2advancedLink = Other options

# suffix on link to show advanced stuff
addPhoneStep2advancedSuffix = )

# label on the hex secret
addPhoneHexLabel = (Hex code to enter into your Yubikey if applicable)

# bottom of activate token
addPhoneStep2activateTokenBottom = Store this secret value in a secure place.

# bottom of the step 2 part
addPhoneStep2bottom = Do not store this QR code or secret value anywhere except in this device.

# description of 3rd step to addPhone
addPhoneStep3description = <b>Step 3 of 3:</b> Test the activation.

# substep in step 3
addPhoneStep3substep = Enter the digits displayed by the authenticator app.

# step 3 code label
addPhoneStep3codeLabel = Enter six or nine digits

# step 3 code button submit
addPhoneStep3codeButton = Test and continue

# cancel the addPhone process, go back to main two-step page
addPhoneCancelButton = Cancel

# if things go wonky or hacker
addPhoneSubmitErrorInconsistent = Inconsistent state, please start over.

# if things go wonky or hacker
addPhoneError = There was an error processing your request.

# error if they submit without entering a code
addPhoneErrorCodeRequired = Activation code required.

# error if they submit an invalid code
addPhoneErrorCodeInvalid = Activation code invalid.  If you are having trouble with an app and you scanned the QR code, try entering it manually.

# code is successful when adding a device
addPhoneSuccess = Successfully added.

############################################
## Index page: twoFactorIndex.jsp
############################################

# title in browser on index page
indexTitle = $$serviceNameCap$$: settings

# subheader in bold if user is opted in
indexOptedInSubheader = $$serviceNameCap$$ settings

# subtext on index page if user is opted in
indexOptedInSubtext = Use buttons below to unenroll from the service, edit recovery contact details, generate new $$codesName$$, untrust previously trusted browsers, view your recent $$serviceNameCap$$ activity, or help a friend who's having trouble logging in.

# subheader in bold if user is not opted in
indexNotOptedInSubheader = $$serviceNameCap$$

# text below subheader if user is not opted in
indexNotOptedInSubtext1 = Protect your $$netId$$ by using both your password and a verification code generated on your phone or device.

# link to opt in to two factor
indexNotOptedInLoginLink = Enroll in this service

# if not opted in, this is subtext
indexNotOptedInSubtext2 = <h4>How it works</h4><ol><li>Enter your $$netId$$ and password as usual on the $$ssoSystemName$$ screen.</li><li>When prompted, approve a "push" message or enter the code from your phone or other device.</li><li>Make your browser trusted (optional). If no one else uses that browser, you only need to verify your identity every 30 days.</li></ol><h4>Why you should use it</h4><br />$$serviceNameCap$$ dramatically reduces the risk of someone stealing your data and your $$institutionName$$ identity. Even if they acquire your password, they still can't log in unless they also have your device.

# if not opted in, this is subtext
index2HowWorks = <h4><a href="#" onclick="$('#howWorksId').toggle('slow'); return false;">How it works</a></h4><div id="howWorksId" style="display: none;"><ol><li>Enter your $$netId$$ and password as usual on the $$ssoSystemName$$ screen.</li><li>When prompted, approve a "push" message or enter the code from your phone or other device.</li><li>Make your browser trusted (optional). If no one else uses that browser, you only need to verify your identity every 30 days.</li></ol><h4>Why you should use it</h4><br />$$serviceNameCap$$ dramatically reduces the risk of someone stealing your data and your $$institutionName$$ identity. Even if they acquire your password, they still can't log in unless they also have your device.</div>

# header in new index page for enrollment
index2EnrollmentHeader = Enrollment

index2EnrolledLabel = Enroll status

# if enrolled
index2EnrollmentEnrolled = Yes, you are enrolled in $$serviceNameCap$$
index2EnrollmentEnroll = Enroll in this service

index2EnrollmentNotEnrolled = No, you are not enrolled in $$serviceNameCap$$
index2EnrollmentUnEnroll = Unenroll from this service

index2RequiredLabel = Required

# required
index2RequiredToOptin = Yes, you are required to enroll in $$serviceNameCap$$<br />due to your affiliation with $$institutionName$$
index2NotRequiredToOptin = No, you are not required to enroll in $$serviceNameCap$$

index2ProfileHeader = Profile
index2ProfileEdit = Edit

# phone labels
index2PhoneNumberLabel1 = Phone
index2PhoneNumberLabel2 = Phone
index2PhoneNumberLabel3 = Phone

# friend labels
index2FriendLabel1 = Friend
index2FriendLabel2 = Friend
index2FriendLabel3 = Friend
index2FriendLabel4 = Friend
index2FriendLabel5 = Friend

# generic label for stuff
index2Devices = Devices
index2DuoPushLabel = Duo Push

index2DuoPushPhoneLabel = Duo Push phone

# if enrolled
index2DuoPushEnrolled = Yes, you are enrolled in Duo Push
index2DuoPushNotEnrolled = No, you are not enrolled in Duo Push

# test button
index2DuoPushTestButton = Test Push

# buttons
index2DuoPushEnrollButton = Enroll in Duo Push
index2DuoPushUnenrollButton = Unenroll from Duo Push

# push by default
index2DuoPushByDefaultLabel = Default Push
index2PushByDefault = Yes, pushing by default in $$ssoSystemName$$
index2DontPushByDefault = No, not pushing by default in $$ssoSystemName$$
index2DuoPushDefaultButton = Start pushing by default
index2DontDuoPushDefaultButton = Stop pushing by default

index2ChangePhonesButton = Change phone

# if not enrolled
index2ErrorNotOptedIn = Error: not enrolled in $$serviceNameCap$$

# if phone by default
index2VoiceTextByDefaultLabel = Default voice /<br />text
index2VoiceTextByDefaultPush = No, you are using default Duo Push
index2TextByDefault = Yes, you will get texts <br />automatically from $$ssoSystemName$$<br />to ${twoFactorRequestContainer.twoFactorUserLoggedIn.phoneAutoCallTextNumber}
index2VoiceByDefault = Yes, you will get calls <br />automatically from $$ssoSystemName$$<br />to ${twoFactorRequestContainer.twoFactorUserLoggedIn.phoneAutoCallTextNumber}
index2VoiceTextByDefaultNo = No, you will not get texts/calls <br />automatically from $$ssoSystemName$$

deviceInstructionsMain = <b>Duo Push</b> allows you to use your second step by simply pressing a button on your phone.  It is recommended that you use <b>Duo Push</b> on your mobile device.  It is the fastest and easiest way to use $$serviceNameCap$$.  If you do not have network connectivity the Duo Mobile app can generate a 6-digit code.<br /><br /><b>Default Push</b> is recommended.  This will automatically send a Push to your device when needed from $$ssoSystemName$$.<br /><br /><b>Default voice / text</b> will automatically send a voice or text to your device when needed from $$ssoSystemName$$.  You must be enrolled by voice / text to use this option.  Penn incurs a cost for each voice / text so it is recommended for you to use <b>Duo Push</b> instead.<br /><br />A <b>Keychain fob</b> can be purchased from the bookstore.  This will display a 6-digit code at the touch of a button.  You must use each code that is displayed.  If things get out of sync, enter 3 sequential codes on the $$ssoSystemName$$ screen.  Note: if you add or change a fob and you were using HOTP codes, you need ro re-register those HOTP apps.<br /><br /><b>HOTP</b> (HMAC-based One Time Password" is a queue of sequential 6-digit codes.  This can be used from the Duo Mobile app (recommended), Google Authenticator, or any HOTP application.  You can add multiple HOTP apps.  HOTP does not require network connectivity.<br /><br /><b>Browser trust</b> allows one user to use $$ssoSystemName$$ and not have to enter a code.  This will last until another user logs in from that browser, or until 30 days elapses with no login, or until cookies are cleared.  If you are no longer trust a trusted browser click "Untrust browsers" below.<br /><br /><b>Printed codes</b> can be printed out and stored in your wallet or another secure location.  These codes can be used once in order.  Make sure to cross out or make a note of which codes were used.

# test duo push
duoPushOnlyTestSuccess = Duo push was sent and successfully accepted!

duoPushOnlyTestFailure = Duo push was sent but not responded to!

index2EnrollPhoneTextDefaultButton = Send voice / text from $$ssoSystemName$$
index2UnenrollPhoneTextDefaultButton = Stop sending voice / text from $$ssoSystemName$$
index2ChangePhoneTextDefaultButton = Change number

# if going to duo screen and not enrolled
index2EnrollPhoneTextDefaultNotOptedIn = Error: not enrolled in $$serviceNameCap$$
index2EnrollPhoneTextErrorInPush = Error: you cannot enroll in auto call / text if enrolled in Duo Push
index2EnrollPhoneTextUnenrollSuccess = Success: $$ssoSystemName$$ will no longer automatically send you a call / text

callTextEnrollTitle = Select phone for default $$ssoSystemName$$
# header for phone install
callTextEnrollSubheader = $$serviceNameCap$$: select phone

# title bar in browser for phone install wizard screen
callTextConfirmPhoneCodeTitle = $$serviceNameCap$$: Confirm phone code

# header for phone install
callTextConfirmPhoneCodeSubheader = Confirm phone code

# text for test push
callTextConfirmPhoneCodeText = Enter the nine-digit code that was just sent to your phone

# text for test push
callTextConfirmSuccessText = Success: your phone is now configured for $$ssoSystemName$$

# error enrolled in Duo push
callTextErrorInPush = Error: you are enrolled in Duo Mobile and cannot default call / text from $$ssoSystemName$$

# people who selected me as a colleague
index2usersSelectedMe = People who selected me as a friend

# instructions for friend list
usersSelectedMeInstructionsMain = These users selected you as a friend.  You can remove yourself from their list if you like.

# if there are no friends
index2UserSelectedMeNone = No users have selected you

index2UserSelectedMe = Selected me

# remove me from their list
index2ColleaguesRemoveFriend = Remove me from their list

#############################################
## index2
#############################################

printedCodesLabel = Printed codes
printedCodesCurrentIndex = Current index is: ${((twoFactorRequestContainer.twoFactorUserLoggedIn.sequentialPassIndex == null ? 500000 : twoFactorRequestContainer.twoFactorUserLoggedIn.sequentialPassIndex) - 500000) % 1000}

codesSubheader2 = Generate codes

untrustBrowserButtonText = Untrust browsers

trustedBrowserCountLabel = Browser trust

trustedBrowserCountText = You have ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsersWithoutUntrusting} trusted browsers

keychainFobLabel = Keychain fob

keychainFobAddButtonLabel = Add fob

keychainFobHasFob = You have registered fob ${twoFactorRequestContainer.twoFactorUserLoggedIn.fobSerial}

# subheader for register keychain fob
fobRegisterSubheader = Register keychain fob

addFobSuccessMessage = Success: your fob is registered.  Note: if you had previously printed out codes you need to print out new codes.  If you have previously registered HOTP devices (uncommon), then you need to re-register those devices.

#############################################
## Common about: commonAbout.jsp at bottom of screen
#############################################

aboutUrl = $$docUrl$$

aboutLinkText = Learn more about $$serviceNameCap$$





#############################################
## Test code
#############################################

# test a code
index2testCodeButton = Test a code

# title bar in browser for test a code
testCodeTitle = $$serviceNameCap$$: test a verification code

# header for test a code
testCodeSubheader = Test a $$serviceNameCap$$ single-use verification code

# text for totp confirm
testConfirmCodeText = Enter a six or nine digit single-use code from any of: Duo, text, voice, printed, fob, Google authenticator, etc.

# submit a code
testCodeSubmitButton = Submit

# cancel and go back to main page
testCodeCancelButton = Cancel

# if the code is valid
testCodeValid = Success: the single-use verification code is valid


#############################################
## TOTP
#############################################

# section on main page about HOTP
index2hotpLabel = TOTP /<br /><span style="white-space: nowrap;">Google authn</span>

# button to add hotp app
index2addHotpAppButton = Add TOTP app

# button to change hotp secret
index2hotpChangeSecret = Change phone / secret

# confirm that the user wants to change secret
index2hotpConfirmChangeSecret = Changing your secret will unregister any existing TOTP devices as well as your keychain fob if you have one.  Your printed codes will also be invalidated.  Do you want to continue?

# title of totp app install title
totpAppInstallTitle = Install Google Authenticator app

# header for install totp app
totpAppInstallSubheader = Install TOTP app e.g. Duo, Google Authenticator, or other

# title of totp integrate page
totpAppIntegrateTitle = Integrate TOTP app e.g. Duo, Google Authenticator, or other

# header to install the phone app
totpAppIntegrateSubheader = Integrate TOTP app e.g. Duo, Google Authenticator, or other

# text below the QR code
totpAppIntegrateTextBottom = If you cannot scan the QR code you can enter this code: <b style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretUnencryptedFormatted}</b> (Base32) or this code: <b style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorUserLoggedIn.TwoFactorSecretUnencryptedHexFormatted}</b> (hex), account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}

# title bar in browser for totp install wizard screen
totpAppConfirmCodeTitle = Confirm TOTP / Google Authenticator code

# header for totp confirm
totpAppConfirmCodeSubheader = Confirm TOTP / Google Authenticator code

# if submit code and invalid
totpErrorCodeTestInvalid = Error: verification code invalid 

# if submit code and invalid
totpErrorCodeNotNumeric = Error: the verification code needs to be 6 or 9 digits

# if hotp code has already been used
totpErrorCodePrintedInPast = Error: this printed code has already been used

# if hotp code is in future
totpErrorCodePrintedInFuture = Error: this printed code can only be used in order and is waiting for previous codes to be used

# if fob code has already been used
totpErrorCodeFobInPast = Error: this fob code has already been used

# if fob code is in future
totpErrorCodeFobInFuture = Error: this fob code can only be used in order and is waiting for previous codes to be used

# if the time based code is in past
totpErrorCodeTime60InPast = Error: this is a 60 second time-based code but the clock is too slow

# if the time based code is in past
totpErrorCodeTime60InFuture = Error: this is a 60 second time-based code but the clock is too fast

# if the time based code is in past
totpErrorCodeTime30InPast = Error: this is a 30 second time-based code but the clock is too slow

# if the time based code is in past
totpErrorCodeTime30InFuture = Error: this is a 30 second time-based code but the clock is too fast

# if submit code and invalid
totpSuccessCodeValid = Success: activation code is valid. 

# title of totp app install title
totpChangeSelectTypeTitle = Change TOTP / Google Authenticator - select type

# header to install the phone app
totpChangeSelectTypeSubheader = Change TOTP / Google Authenticator - select type

# title of totp app install title
totpChangeUploadSecretTitle = $$serviceNameCap$$: change TOTP / Google Authenticator - enter secret value

# header to install the phone app
totpChangeUploadSecretSubheader = Change TOTP / Google Authenticator - enter secret

# title of totp app install title
totpChangeInstallTitle = Install TOTP / Google Authenticator app

# header to install the phone app
totpChangeInstallSubheader = Install TOTP / Google Authenticator app

# text for app install
totpChangeInstallText = Duo Mobile is $$institutionName$$'s preferred $$serviceNameCap$$ app.  Google Authenticator or most other TOTP or HOTP apps will work too.<br /><br /><br />Open your phone's app store and install the free <a href="#" onclick="$('#duoInstallStepsId').toggle('slow'); return false;">Duo Security</a> or <a href="#" onclick="$('#googleInstallStepsId').toggle('slow'); return false;">Google Authenticator app</a> (or another TOTP/HOTP app)<div id="duoInstallStepsId" style="display: none"><br /><br /><img src="../../assets/duoInstallSteps.jpg" alt="Screenshots showing how to install Duo" /> </div> <div id="googleInstallStepsId" style="display: none"><br /><br /><img src="../../assets/googleInstallSteps.jpg" alt="Screenshots showing how to install Google Authenticator" /> </div><br /><br /><br />If you need more information see the <a href="https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile" target="_blank">Duo documentation</a> or <a href="https://support.google.com/accounts/answer/1066447?hl=en" target="_blank">Google Authenticator documentation</a>

# text for app install
totpChangeAppIntegrateText = <a href="#" onclick="$('#googleAuthOpenId').toggle('slow'); return false;">Open the Google Authenticator app on your phone</a><div id="googleAuthOpenId" style="display: none"><br /><br /><img src="../../assets/googleAuthOpen.jpg" alt="Screenshots showing how to open Google Authenticator" /> </div><br /><br />If you have previously enrolled and already have a $$duoIntegrationListing$$-related listing in Google Authenticator, <a href="#" onclick="$('#googleDeleteStepsId').toggle('slow'); return false;">delete that listing</a><div id="googleDeleteStepsId" style="display: none"><br /><br /><img src="../../assets/googleDeleteSteps.jpg" alt="Screenshots showing how to delete a Google listing" /> </div><br /><br /><a href="#" onclick="$('#googleAddStepsId').toggle('slow'); return false;">Add a new listing and then scan this QR code</a><div id="googleAddStepsId" style="display: none"><br /><br /><img src="../../assets/googleAddSteps.jpg" alt="Screenshots showing how to add a Google listing" /> </div>

# text below the QR code
totpChangeAppIntegrateTextBottom = If you cannot scan the QR code you can enter this code: <b style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretUnencryptedFormatted}</b> (Base32) or this code: <b style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorUserLoggedIn.TwoFactorSecretUnencryptedHexFormatted}</b> (hex), account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}

# title bar in browser for totp install wizard screen
totpChangeConfirmCodeTitle = $$serviceNameCap$$: Confirm TOTP / Google Authenticator code

# header for totp confirm
totpChangeConfirmCodeSubheader = Confirm TOTP / Google Authenticator code

# text for totp confirm
totpChangeConfirmCodeText = Enter the six-digit TOTP code displayed by Duo / <a href="#" onclick="$('#googleGetCodeHelpId').toggle('slow'); return false;">Google Authenticator</a>
totpChangeConfirmCodeText2 = <div id="googleGetCodeHelpId" style="display: none"><br /><br /><img src="../../assets/googleGetCodeSteps.jpg" alt="Showing how to get a code displayed by google authenticator" /> </div>

# message after successfully opting in
totpChangeSuccessMessage = You have changed your TOTP / Google Authenticator secret in $$serviceNameCap$$.



#############################################
## Profile instructions: profileInstructions.jsp
#############################################

profileInstructionsOptedInTop = To enroll in this service you need a profile.<br /><br />You also need an email address of record in the $$directoryName$$.<br /><br />

profileInstructionsMain = You <b>should</b> have an email address in the $$directoryName$$ <b>and</b> choose at least two ways to help yourself in case of problems. So designate at least two phone numbers, two friends, or one of each.<br /><br />We can use your email address to notify you of updates and remind you of your settings. If you have trouble logging in, we can send a $$codeName$$ to the backup phone(s) you list below (via text or voice). You can use that code to log in once.<br /><br />You can also identify one or more friends who may be authorized to generate a one-time code for you if you have trouble logging in. Each should be someone who knows your voice, will answer your call, and is willing to help. To identify a friend, enter a $$netId$$, then select the correct person from the list that appears. (They will be notified by email that you have selected them.)<br /><br /><b>Note:</b> Two total lifelines (i.e. phones and friends) are required.  You need at least one phone and at least one friend is recommended. If you choose not to enter any friends, you will need two phones.  If you are new to Penn and do not have a phone, you can enroll now, and come back to <a href="${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</a> to setup two lifelines.  Otherwise you will be locked out if you do not have your device.<br /><br /><b>Note:</b> International numbers must start with a plus, then country code, and phone number, e.g. +44 12 34 567890

#############################################
## Misc messages
#############################################

# if there is a maximum number of users in this service in the config file: twoFactorServer.max.registrations, which has been reached, then dont allow new users
cantOptInSinceTooManyUsers = This service is closed to new users. Email <span style="white-space: nowrap;">$$supportEmailAddress$$</span> to register your interest in $$serviceNameCap$$

# if there is a maximum number of users in this service in the config file: twoFactorServer.max.registrations, which has been reached, then dont allow new users
cantOptInSinceNotActive = This service is for active faculty, students, and staff.



#############################################
## Admin screen: admin.jsp
#############################################

# title at top of browser
adminTitle = $$serviceNameCap$$: administration

# subheader in bold below header
adminSubheader = $$serviceNameCap$$: administration

# prefix before opted in users report
adminOptedInUsersPrefix = Enrolled users:

# prefix before opted out users report
adminOptedOutUsersPrefix = Unenrolled users:

# person to manage label in admin screen
adminPersonToManage = Person to manage

# label next to the combobox to find the person to backdoor as
adminPersonToBackdoorAs = Person to backdoor as

# if the user is already enrolled, this will show the users name, then this text
adminIsAlreadyEnrolledInThisService = is currently enrolled in this service

# number of colleagues in profile
adminNumberOfColleagues = friends configured in profile

# number of colleagues in profile
adminNumberOfColleaguesWhoPickedThisUser = people selected this user as a friend

# section of friends this user chose
adminColleaguesThisPersonHasChosen = Friends this user has selected:

# section of friends this user chose
adminPeopleSelectedThisUserAsColleague = People selected this user as friend:

# remove button to remove friends
adminColleaguesRemoveFriend = Remove

# if the friend was removed successfully
adminColleaguesRemoveFriendSuccess = Success: the friend was removed

# if the friend was could not be found
adminColleaguesRemoveFriendNotFound = Warning: The friend could not be found

# if the friend had an error being removed
adminColleaguesRemoveFriendError = Error: problem removing friend

# section of friends who chose this user
adminColleaguesWhoChoseThisPerson = Who chose this user:

# number of phones in profile
adminNumberOfPhones = phone numbers in profile

# if has invited friends for help within allotted time
adminHasInvitedFriends = Has invited friends for help within allotted time
adminHasntInvitedFriends = Has not invited friends for help lately (i.e. within the allotted time)

# if enrolled in push
adminPush = Is enrolled in Duo Push
adminDontPush = Is not enrolled in Duo Push

# if enrolled in push
adminPhoneOptIn = Is enrolled primarily by phone (text/voice)
adminNotPhoneOptIn = Is not enrolled primarily by phone (text/voice)

# if enrolled in push
adminAutoPhoneToNumber = Is auto ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneAutoCallTextType} for $$ssoSystemName$$ to phone number: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneAutoCallTextNumber,true)} 
adminNotAutoPhoneToNumber = Is not auto voice/text to a number for $$ssoSystemName$$

# phone number histogram by date
adminPhoneAutoCalltextsInMonth = Auto call texts count histogram by day: 

# if has duo push by default
adminPushByDefault = Is pushing by default in $$ssoSystemName$$
adminDontPushByDefault = Is not pushing by default in $$ssoSystemName$$

# if required to opt in
adminRequiredToOptin = Is required to enroll
adminNotRequiredToOptin = Is not required to enroll

# opt in only if required
adminOptinOnlyIfRequired = Is enrolled only for $$ssoSystemName$$ apps which require it
adminOptinForAll = Is enrolled for all $$ssoSystemName$$ apps (not just apps which require it)

# email label
adminEmailAddressIs = Email address is: 

# the button to opt out a user will say this text, then the user's name
adminOptOutPerson = Unenroll

# confirm message prefix+suffix to see if admin really wants to opt out a user
adminOptOutConfirm = Are you sure you want to unenroll ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# confirm message prefix+suffix to see if admin really wants to generate code
adminGenerateCodeConfirm = Are you sure you want to generate code for ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# untrust browsers for user prefix for button to untrust
adminUntrustBrowsersFor = Untrust browsers for

# generate code for user prefix for button
adminGenerateCodeFor = Generate one-time code for

# manage a user
adminManageUser = Manage user

# confirm message prefix+suffix for admin to untrust someone's browsers
adminUntrustConfirm = Are you sure you want untrust browsers for ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# username is not currently enrolled, everything but username
adminNotEnrolled = is not currently enrolled in this service.

# suffix if admin console but user is not an admin
adminErrorUserNotAdmin = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorUserLoggedIn.name, true)} is not an administrator

# if operating on a user, and it is blank, this is the error
adminErrorUserToOperateOnIsRequired = You must specify a user

# not sure why this would happen since there is a combobox, but if the user is not found, this is the error
adminErrorUserToOperateOnNotFound = Person not found

# if someone picked from the combobox is not in the system (never opted in), this is error message suffix
adminErrorUserToOperateOnNotInSystem = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name, true)} has never enrolled

# if opting out a user, but they weren't opted in, this is the message prefix+suffix. Note, not sure why this would happen.
adminErrorUserWasNotOptedIn = Warning: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name, true)} was not enrolled in $$serviceNameCap$$

# when a user was opted out of two factor successfully, this is message suffix
adminOptOutUserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)} was unenrolled from $$serviceNameCap$$

# Success message suffix when untrusting browsewrs. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
adminUntrustBrowserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}'s ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser(s) are now untrusted

# Success message when generating a code for the user.  the code is in twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneCodeUnencryptedIfNotExpired
adminGenerateCodeForUserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)} has a new temporary (expires in 10 minutes) one-time use code: <big>${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneCodeUnencryptedIfNotExpired}</big>.  The user can log in to [${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}] and generate 20 more codes.

# success of report scheduled
adminReportScheduled = The report has been scheduled and will be emailed to you

##############################################
## Admin email all users
##############################################

# title at top of browser
adminEmailAllTitle = $$serviceNameCap$$: administration - email all

# subheader in bold below header
adminEmailAllSubheader = $$serviceNameCap$$: administration - email all enrolled users

# label for if the email should be sent
adminEmailAllReallySend = Send email?

# label for the body of the email
adminEmailAllEmailSubject = Email subject

# label for the body of the email
adminEmailAllEmailBody = Email body

# validation errors
adminEmailAllErrorNoSubject = Subject is required
adminEmailAllErrorNoBody = Body is required
adminEmailAllErrorNoLoggedInUsers = There are no enrolled users found

adminEmailAllEmailNotSentPrefix = Email would have been sent to (bcc):
adminEmailAllEmailSentPrefix = Email was sent to (bcc):

auditsSendEmailToAllUsersSuccess = Email was sent to ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users
auditsSendEmailToAllUsersNotSentSuccess = Email would have been sent to ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users

##############################################
## Admin import fob serials
##############################################

# title at top of browser
adminImportSerialsTitle = $$serviceNameCap$$: administration - import fob serial numbers

# subheader in bold below header
adminImportSerialsSubheader = $$serviceNameCap$$: administration - import fob serial numbers

# describe the page
adminImportSerialsInstructions = Paste in a CSV with two columns, one with column: serialNumber, one with column: secret

# error if columns arent correct
adminImportSerialsErrorColumns = Make sure one column is: serialNumber, and another column is: secret

# error on row for serial import
adminImportSerialsErrorOnRow = Error on row ${twoFactorRequestContainer.twoFactorAdminContainer.importFobLineNumber}, serial: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importSerial, true)}: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importFobError, true)}

# label for fob serial numbers an CSV
adminImportSerialsLabelSerials = Fob serial numbers <br />and secrets CSV:

# user cannot import serials
adminImportSerialsErrorUserNotImportSerials = You cannot import serials

# import was blank
adminImportSerialsSerialsBlank = Enter some serials comma separated

# is there is a header row
adminImportSerialsLabelSerialHeader = Has header row?

# description in audits
auditsImportSerialsDescription = Imported ${twoFactorRequestContainer.twoFactorAdminContainer.importFobCount} fob serials successfully, had ${twoFactorRequestContainer.twoFactorAdminContainer.importFobErrors} errors

# dont use a sample secret or serial
adminImportSerialsNoSamples = Do not use a sample serial or secret

# cant import this secret since it already exists
adminImportSerialsSecretExists = Cannot import this secret since it already exists

# cant import this serial number since it already exists
adminImportSerialsSerialExists = Cannot import this serial number since it already exists

##############################################
## Recent history: userAudits.jsp
##############################################

# title in browser
auditsTitle = $$serviceNameCap$$: history

# subtitle in bold below the header
auditsSubheader = $$serviceNameCap$$: history

# prefix before the name
auditsNamePrefix = Recent $$serviceNameCap$$ actions are shown for

#suffix after name
auditsNameSuffix = .

# paragraph 2 of audits page
auditsNameParagraph2 = Browser and operating system are reported by the browser.

# in audit console, actions displayed to user
auditsGenerateSingleUseCodes = Generate single-use codes
auditsAssignProfileEmailFromSubject = Assign email from $$directoryName$$

# in the description of this, it will be audited
auditsAssignProfileEmailFromSubjectBlank = none
auditsAssignProfileEmailFromSubjectPrefix1 = From:
auditsAssignProfileEmailFromSubjectPrefix2 = , to:

auditsError = Error
auditsImportFobSerials = Import fob serials
auditsWrongBirthday = Wrong birthday
auditsSendEmailToAllUsers = Send email to all users
auditsSendTestEmailToAllUsers = Test email to all users
auditsSendEmailToAllUsersDescription = Email for ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users
auditsSendCodeToPhone = Send code to a phone
auditsErrorAuthenticating = Error authenticating
auditsFriendOptedMeOut = Friend unenrolls me
auditsOptedOutFriend = Enroll a friend


auditsFriendGeneratedMeCode = Friend generated me a code
auditsGeneratedCodeForFriend = Generated code for a friend

auditsLiteAdminGeneratedMeCode = Lite admin generated me a code
auditsGeneratedCodeAsLiteAdmin = Generated code as a lite admin

auditsViewProfile = View profile
auditsEditProfile = Edit profile
auditsTwoStepAuthentication = $$serviceNameCap$$
auditsTwoStepAuthenticationForbidden = $$serviceNameCap$$ forbidden
auditsTwoStepAuthenticationRequired = $$serviceNameCap$$ required
auditsAllowWithError = Allow with error
auditsTrustedBrowserUse = Trusted browser use
auditsNonTwoStepAuthentication = Non-two-step verification
auditsAddPhone = Add phone
auditsAddTotp = Add TOTP (e.g. Google Authenticator)
auditsChangeTotp = Change TOTP (e.g. Google Authenticator)
auditsAddPhoneTest = Test code after add phone
auditsOptIn = Enroll
auditsOptInSubmitBirthday = Enroll step, submit birthday
auditsOptInSubmitEmail = Enroll step, submit email
auditsOptInSubmitPhones = Enroll step, submit phones
auditsOptInSubmitFriends = Enroll step, submit friends
auditsInviteFriendsToOptMeOut = Authorize friends to unenroll me
auditsOptInStep1 = Enroll (step 1)
auditsOptOut = Unenroll
auditsUntrustBrowsers = Un-trust browsers
auditsWrongCode = Wrong verification code
auditsInvalidateSingleUseCodes = Invalidate single-use codes
auditsRegisterFobBySerial = Register device by serial number
auditsAdminReportEdit = Administration edit reports
auditsAdminGenerateCode = Administration generate code for user
auditsReportView = View report
auditsDuoEnablePushForWeb = Duo push for $$ssoSystemName$$ enable
auditsDuoDisablePushForWeb = Duo push for $$ssoSystemName$$ disable
auditsDuoPushEnable = Duo push enable
auditsDuoPushDisable = Duo push enable
auditsDuoPushEnableTestSuccess = Duo push test success
auditsDuoPushEnableTestFailure = Duo push test failure
auditsStopOptInRequirement = Stop enrollment requirement
auditsOptInSubmitType = Enroll step, submit type
auditsAutoCallTextEnroll = Enroll in automatic call / text
auditsAutoCallTextUnenroll= Unenroll in automatic call / text
auditsAutoCallTextChange = Change automatic call / text

auditsFobAdd = Add fob
auditsFobRemove = Remove fob

auditsAdminConfirmUser = Administration confirm user

auditsRemoveFriend = Remove friend

############################################
## Audits include page: auditsInclude.jsp
############################################

# when there are no audits
auditsNoAudits = There are no recent audit records available.

# headers for audit table
auditsHeaderDate = Date
auditsHeaderAction = Action
auditsHeaderIpAddress = IP address
auditsHeaderDomainName = Domain name
auditsHeaderOperatingSystem = Operating system
auditsHeaderBrowser = Browser
auditsHeaderTrustedBrowser = Trusted browser checked?
auditsHeaderUserLoggedIn = User logged in
auditsHeaderDescription = Description


##############################################
## Show one time codes: showOneTimeCodes.jsp
##############################################

# title in browser, note, this is printed out, so you want the user to know what
# the codes are for. At Penn, we have: Penn Two-Step Verification codes
codesTitle = $$institutionName$$ $$serviceNameCap$$ codes

# subtitle below the header
codesSubheader = Enroll: step 9 of 9 - generate codes 

# paragraphs in codes page
codesParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ below to log in.

codesParagraph2 = <a href="#" onclick="window.print(); return false;">Print the codes and instructions</a> now using your browser, and keep them safe.

codesParagraph3 = You can use each code once, in sequence.  It is recommended that you cross out the codes that you have already used.  If you forget which code you used last, enter any <b>two</b> unused codes in sequence (separated by a space). If you lose your printed codes, or use them all, go to the "Manage settings" page and click the "Generate codes" button to create a new set. Any previously unused codes will be invalidated.

# label above the codes
codesLabel = Currently valid codes:

# instructions on the printed paper for codes
codesPrintedInstructions = You can use each code once in sequence. If you<br /> forget which code you used last, enter any <b>two</b><br /> unused codes in sequence (separated by a space).

# can't show codes if not opted in, generally this will be seen by hackers only
codesErrorAlreadyOptedIn = You are not enrolled!


###########################################
## Having trouble logging in
###########################################

# on the having trouble screen, this is in bold below the header
havingTroubleSubheader = $$serviceNameCap$$: trouble logging in

# on the having trouble screen, descriptive text
havingTroubleParagraph1 = Trouble logging in? You have four options:<br/ ><br /><ol class="bold"><li><b>Enter the next unused single-use verification code on the list, printed when you enrolled, or later from the "Manage settings" page.</b></li><br /><li><b>Send a single-use verification code to your backup phone:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# before the authorizing friends part
havingTroubleParagraph2 = </div></li><li><b>Authorize previously identified friends to retrieve a $$serviceNameCap$$ code:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# after the friends part
havingTroubleParagraph2end = </div></li><li><b>If you are unable to obtain a verification code using one of the above options:</b><ul><li style="font-weight: normal">The $$serviceNameCap$$ Code Hotline may be able to assist.  The hotline can be contacted at <span style="white-space: nowrap;">(215) 746-2222</span> during business hours <span style="white-space: nowrap;">(Monday - Friday, 8:00am - 6:00pm EST).</span></li><li style="font-weight: normal">The IT organization of your school or center may have a $$serviceNameCap$$ Administrator who may be able to assist you.</li></ul></li></ol>
                                               
# message saying the user is enrolled in the service
havingTroubleEnrolled = You are currently enrolled in this service

# having trouble voice label before the phone number
havingTroubleVoicePrefix = Voice:

# having trouble text label before the phone number
havingTroubleTextPrefix = Text:

# having trouble no phone numbers message
havingTroubleNoPhoneNumbers = You have not entered any phone numbers, so you cannot get a single-use verification code by phone

# Label for the list of friends someone can/has selected
havingTroubleFriendsInvitedSubtitle = You have authorized these friends to retrieve a single-use verification code:
havingTroubleFriendsNotInvitedSubtitle = You can authorize these friends to retrieve a single-use verification code:

# button text to authorize friend(s) to opt you out
havingTroubleAllowFriendButton = Authorize friend(s) to retrieve a single-use verification code

# before the link to authorize friend(s), this is the text
havingTroubleAllowFriendsPrefix = To get help,

# to authorize friend(s), this is the link
havingTroubleAllowFriendsLink = authorize your friend(s) to retrieve a code.

# to allow friends, this is the suffix after the link
havingTroubleAllowFriendsSuffix = Then call one of the friends listed above, ask them to log in to <span style="white-space: nowrap;">[${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}]</span>, click "Manage settings" and then click "Help a friend" to retrieve a single-use verification code that they can read to you.

# if authorized friends, this is the paragraph
havingTroubleYouHaveAllowedFriendParagraph = To retrieve a $$serviceNameCap$$ code, call one of the friends listed above, ask them to log in to <span style="white-space: nowrap;">[${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}]</span>, click "Manage settings" and then click "Help a friend".

# if authorized friends, this is the paragraph
havingTroubleYouHaveAllowedFriendNoFriendsParagraph = You have authorized friends to retrieve a single-use verification code.  Since you have not previously identified friends, you need to ask a $$serviceNameCap$$ admin or $$serviceNameCap$$ lite admin.

# if there are no friends who can opt the user out
havingTroubleNoFriends = You have not identified anyone you can authorize to retrieve a single-use verification code.

# if the user is not enrolled in two factor
havingTroubleNotEnrolled = You are not currently enrolled in this service.

# success message for authorizing friends
havingTroubleAuthSuccess = You have authorized friends to retrieve a single-use verification code for you

# audit message prefix for code sent to phone, after this will be 3#####, the first digit will show, but not subsequent ones
havingTroubleAuditPrefix = Code sent to phone:

# audit message prefix for duo code sent to phone, after this will be 3#####, the first digit will show, but not subsequent ones
havingTroubleDuoCodeAuditPrefix = Duo auto-code sent to phone

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsnt = You are required to be enrolled in $$serviceNameCap$$ but you are not enrolled.  You must enroll in $$serviceNameCap$$ in order to access $$netId$$-protected web resources.

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsntButton = Temporarily remove requirement to be enrolled

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsntMessage = Success: you are temporarily exempted from mandatory enrollment in $$serviceNameCap$$. Tomorrow morning you will be required to enroll again. Wait 5 minutes before logging in for the changes to take effect.

# text message prefix to use
havingTroubleTextPhonePrefix = Your $$institutionName$$ $$serviceNamePrefixLower$$ single-use verification code is:

# voice message prefix to use
havingTroubleVoicePhonePrefix = Your $$institutionName$$ $$serviceNamePrefixLower$$ single-use verification code is:
havingTroubleVoiceInfix = Again,

#############################################
## Help friend screen: helpColleague.jsp
#############################################

# title at top of browser
helpFriendTitle = $$serviceNameCap$$: help a friend

# subheader in bold below header
helpFriendSubheader = $$serviceNameCap$$: help a friend

# first paragraph of text for help a friend
helpFriendParagraph1 = Anyone who enrolls in $$serviceNameCap$$ may identify one or more friends who can be authorized to retrieve a single-use verification code for them. Should they ever be without a valid verification code, they can click "Trouble logging in?" from the $$ssoSystemName$$ screen and authorize their friends to generate a code. They may then contact one of their authorized friends to complete the process.

# second paragraph of text for help a friend
helpFriendParagraph2 = If you have been authorized to generate a code for a friend, a button will appear below allowing you to do so. Should you receive a request, be sure to verify the requester's identity. Voice recognition is best; email can be forged.

# third paragraph of text for help a friend
helpFriendParagraph3 = The following people have authorized you to generate a code for them:

# third paragraph of text for help a friend
helpFriendListNotAuthorized = The following people have identified you as friends but have not yet authorized you to generate a code for them:

# prefix before name for help a colleague
helpFriendCheckboxPrefix = I have verified${' '}

# suffix after name for help a colleague
helpFriendCheckboxSuffix = 's identity by sight or voice.

# prefix of button to opt out friend (the name will be after this)
helpFriendOptOutButtonPrefix = Generate a single use verification code for 

# confirm message prefix+suffix when you want to opt someone out (insert name)
helpFriendOptOutConfirmPrefix = Are you sure you want to unenroll
helpFriendOptOutConfirmSuffix = ?

helpFriendGenerateCodeConfirmPrefix = Are you sure you want to generate a single-use verification code for
helpFriendGenerateCodeConfirmSuffix = ?

# if no one has selected this person as a friend
helpFriendNoAuthorizedFriends = No one has identified you to be authorized to unenroll them from $$serviceNameCap$$.

# if no one has selected this person as a friend
helpFriendNoIdentifiedFriends = No one has identified you in their profile.

# if the user selected hasn't allowed friends to opt them out. Generally only hackers will see this
helpFriendErrorUserDidntAllow = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} must authorize selected friends to unenroll them.

# if the user didnt check the checkbox on the screen
helpFriendErrorUserDidntCheckCheckbox = You must check the checkbox signifying that you have verified ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)}'s identity by sight or voice.

# if the user selected hasnt selected this user as friend. Generally only hackers will see this
helpFriendErrorUserNotFriend = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} must authorize you to unenroll them.

# this can happen if another friend opted them out or they got out some other way
helpFriendWarnNotOptedIn = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} is not currently enrolled in $$serviceNameCap$$.

# prefix+suffix of success message after opting out friend (insert name)
helpFriendSuccess = Success: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} has been unenrolled from $$serviceNameCap$$.
helpFriendCodeSuccess = Success: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} can now use this $$serviceNameCap$$ code for the next 10 minutes: <big>${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.codeForFriend}</big>

# audit message description success before name
helpFriendAuditDescriptionPrefix = Unenroll

# audit message the friend will see before name
helpFriendAuditDescriptionForFriendPrefix = Unenroll by

# audit message description success before name
helpFriendCodeAuditDescriptionPrefix = Generate single-use verification code for friend

# audit message the friend will see before name
helpFriendCodeAuditDescriptionForFriendPrefix = Generate single-use verification code for me by friend

##############################################
## Optin: optin.jsp
##############################################

# title bar in browser for optin screen
optinTitle = $$serviceNameCap$$ ${twoFactorRequestContainer.twoFactorUserLoggedIn.optedIn ? 'Reset enrollment' : 'Enroll'}

# subheader for opting in to two factor
optinSubheader =  Enroll: step 1 of 9 - confirm birthday

# step 1 description
optinStep1description = <b>Step 1 of <span class="serialClass" style="display: none">2</span><span class="secretClass">3</span>:</b> Install an authenticator app on your mobile device or obtain a hardware token.

# if you are opted in when you go to the opt in screen
optinStep1optedIn = You are already enrolled.  You must unenroll before you can re-enroll.

# close button in corner of optin step boxes
optinStepClose = Close

# how to register question on optin screen
optinStep2howToRegisterToken = How do you want to register your token?

# if registering with serial number
optinStep2registerWithSerialNumber = Enter the token's serial number (e.g. for tokens purchased from the $$institutionName$$ bookstore)

# if registering with a secret from device
optinStep2registerWithSecret = Enter the token's secret

# if registering with a serial number
optinStep2labelSerialNumber = Token serial number

# if registering with a serial number
optinStep2labelBirthday = Enter your birthday

# label for 6 digit code
optinStep2labelCode = Enter six-digit code

# help text for the 6 digit code
optinStep2helpCode = Enter the digits displayed by the token.<br />If a token code is not accepted, <br />try entering 12 digits comprised of two<br />consecutive codes concatenated together.

# help text for the serial number
optinStep2helpSerial = Enter the serial number from a sticker on the token

# button for step 2 serial numbers
optinStep2serialNumberButton = Test and continue

# step two header
optinStep2description = <b>Step 2 of <span class="serialClass" style="display: none">2</span><span class="secretClass">3</span>:</b> Activate the token and/or app(s).

# step 2 activate a token
optinStep2activateToken = Activate a hardware token

# step 2 activate an app
optinStep2activateApp = Activate an app

# step 2 opt in with a phone
optinStep2optinPhone = Enroll with a phone

# content that shows when you click the activate an app button
optinStep2activateContent = Scan the <a href="#qrCode">QR code below</a> or enter this secret value into your device:<br /><br /><b>${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretTempUnencryptedFormatted}</b><br />(Base32 for most authenticator apps.<br />Account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}. Select "time based".)<br /><br />Do not store this QR code or secret value anywhere except in this device.<br /><br />Note: if you want to use both a hardware token and an app, you must submit the token's secret value before activating the app.

# content that shows when you optin with phone
optinStep2phoneContent = Click on one of the 'text' or 'voice' buttons below. A nine digit code will be sent to that phone number now. Type in the six-digit code in step 3 below.

# if there is no phone you cant opt in with a phone
optinStep2phoneNoPhone = Error: you must have at least one phone registered in your profile

# link to show advanced stuff
optinStep2advancedLink = Other options

# suffix on link to show advanced stuff
optinStep2advancedSuffix = )

# label on the hex secret
optinHexLabel = (Hex code to enter into your Yubikey if applicable)

# bottom of activate token
optinStep2activateTokenBottom = Store this secret value in a secure place.

# label to submit the custom secret (advanced)
optinStep2customSecretLabel = Enter the secret value that came with the token

# buttom to submit custom secret
optinStep2submitCustomSecretButton = Submit secret value

# description on advanced sumit secret token dialogue
optinStep2advancedCustomSecretDescription = Enter secret value from Deepnetsecurity or Gemalto keychain TOTP token, or any OATH HOTP or TOTP 30 second or 60 second token. Store this secret value in a secure place. Note: hex and base32 formats are accepted and auto-detected.

# bottom of the step 2 part
optinStep2bottom = Do not store this QR code or secret value anywhere except in this device.

# if serial number is required
optinErrorSerialRequired = Error: serial number is required.

# if the serial number could not be found
optinErrorSerialNotFound = Error: the serial number you entered could not be found.  Either you need to try again, or the device has not been registered in the system.

# required and invalid codes
optinErrorCode1Required = Error: the first six-digit code is required
optinErrorCode1Invalid = Error: the first six-digit code is invalid, must be numeric
optinErrorCode2Required = Error: the second six-digit code is required
optinErrorCode2Invalid = Error: the second six-digit code is invalid, must be numeric

# if the fob codes are invalid
optinErrorCodesInvalid = Error: invalid codes

# if the serial number (or secret?) was registered to someone else
optinErrorSerialRegisteredToSomeoneElse = Error: the serial number you are registering has been registered to someone else and can only be used by that person.

# if the serial number (or secret?) was registered to someone else
optinErrorSecretRegisteredToSomeoneElse = Error: the secret you are registering belongs to a device that has been registered to someone else and can only be used by that person.

# if the fob was registered when opted in by a user
optionStep2auditRegisterFob = Enrolled registered device with serial number: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importSerial, true)}

# description of 3rd step to optin
optinStep3description = <b>Step 3 of 3:</b> Test the activation.

# enter your birthday in optin screen
optinStep3enterBday = Enter your birthday

# month day year
optinStep3enterBdayMonth = Month
optinStep3enterBdayDay = Day
optinStep3enterBdayYear = Year
optinStep3enterBdayMonthJan = Jan
optinStep3enterBdayMonthFeb = Feb
optinStep3enterBdayMonthMar = Mar
optinStep3enterBdayMonthApr = Apr
optinStep3enterBdayMonthMay = May
optinStep3enterBdayMonthJun = Jun
optinStep3enterBdayMonthJul = Jul
optinStep3enterBdayMonthAug = Aug
optinStep3enterBdayMonthSep = Sep
optinStep3enterBdayMonthOct = Oct
optinStep3enterBdayMonthNov = Nov
optinStep3enterBdayMonthDec = Dec


# substep in step 3
optinStep3substep = Enter the digits displayed by the authenticator app or token.<br />If activating both, enter digits from the token.  If a fob code is not accepted, try entering 12 digits comprised of two consecutive codes concatenated together.

# step 3 code label
optinStep3codeLabel = Enter six or nine digits

# step 3 code button submit
optinStep3codeButton = Test and continue

# at the bottom of step 3
optinStep3bottom = Your enrollment is not complete until you test the activation.

# cancel the optin process, go back to main two-step page
optinCancelButton = Cancel

# if things go wonky or hacker
optinSubmitErrorInconsistent = Inconsistent state, please start over.

# error if they submit without entering a code
optinErrorCodeRequired = Activation code is required.

# error if they submit without entering a code
optinErrorBirthDayRequired = Birthday is required.

# error if they submit without entering a code
optinErrorBirthDayInvalid = Birthday is not correct

# error if there are too many per day
optinErrorBirthDayPassedThreshold = You may only attempt to enter your birthday a certain number of times each day; you must wait until tomorrow to try again.

# error if they submit an invalid code
optinErrorCodeInvalidFromSerial = Activation code invalid.  Please try again. Make sure the serial number and six-digit code are correct.<br /><br />If you are having trouble, try entering 12 digits at once: two sequential codes together (wait 30 seconds between pressing the button).

# error if they submit an invalid code
optinErrorCodeInvalid = Activation code invalid.  If you are having trouble with an app and you scanned the QR code, try entering it manually. <br /><br />If you are having trouble with a keychain HOTP fob try entering 12 digits at once: two sequential codes together (wait 30 seconds between pressing the button).<br />

# if submitting a custom secret, then the textfield is required, this is the error message
optinErrorCustomSecretRequired = Custom secret is a required field.

# if submitting a custom secret, must be alphanueric or whitespace, if invalid chars, this is the error message
optinErrorCustomSecretInvalid = Invalid custom secret: should be alphanumeric or whitespace.  Please try again.

# not sure why this would happen, but custom secret has a minimum length, e.g. 6 chars
optinErrorCustomSecretNotLongEnough = Custom secret not long enough.

# if opting in, and email is required, this is the error message if the user doesn't have an email address
optinErrorEmailRequired = Email address required to enroll.

# when submitting a secret value, this is the success message
optinSubmitSecretValueSuccess = Your secret value has been submitted. If you are also activating an app, follow the instructions below now. Otherwise, <a href="#step3">proceed to Step 3</a>

##############################################
## Successful opt in: optinSuccess.jsp
##############################################

# after successfully opting in, this is the subheader below the header on the page
optinSuccessSubheader = $$serviceNameCap$$

# message after successfully opting in
optinSuccessMessage = You have successfully enrolled in $$serviceNameCap$$.

# paragraph 1 on optin success page
optinSuccessParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ generated below to log in.

# paragraph 2 on optin success page
optinSuccessParagraph2 = <a href="../../twoFactorUi/app/UiMain.showOneTimeCodes">Generate a list of single-use verification codes and instructions</a> now using your browser. Print them and keep them with you in case you are without a working phone.<br /><br />Finally, log out and log back in to access resources that require $$serviceNameCap$$.


#############################################
## If opting out
#############################################

# if opting out and not opted in, this should only appear to hackers
optoutErrorNotOptedIn = Alert: you have not enrolled in this service.

# just opted out message
optoutSuccessMessage = You have been unenrolled from $$serviceNameCap$$


#############################################
## Phone codes: nonTwoFactorPhoneCode.jsp
#############################################

# title at top of browser
phoneCodeTitle = $$serviceNameCap$$ phone code

# subheader in bold below header
phoneCodeSubheader = $$serviceNameCap$$ code sent to your phone

# paragraph for phone code sent to phone
phoneCodeParagraph1 = To use the code sent to your phone, navigate to a protected web resource and begin the log-in process again. After authenticating with your $$netId$$ and password, you will be prompted for a $$serviceNameCap$$ code, and you can enter the one sent to your phone. <br /><br/>You can also use the code to unenroll from $$serviceNameCap$$. To do so, click the "Manage settings" link in the footer at the bottom of this page. When prompted for a $$serviceNameCap$$ code, enter the one on your phone. On the "Manage settings" page, click the button labeled "Unenroll".


##############################################
## Profile edit screen: profile.jsp
##############################################

# title at top of browser
profileTitle = $$serviceNameCap$$ profile

# edit profile subheader below the header
profileSubheader = $$serviceNameCap$$ profile

# label for opt in type
profileOptinType = Enrollment type

# label on radio to opt in for all
profileOptinRadioForAll = Enroll for all applications (most secure option)

# label on radio to opt in for all
profileOptinRadioIfRequired = Enroll only for applications that require $$serviceNameCap$$

# label for email field
profileEmailLabel = Email

# prefix of edit email link
profileEditEmailPrefix = (

# link to edit email address
profileEditEmailLinkUrl = https://directory.school.edu/editProfile

# link text to edit email address
profileEditEmailLinkText = edit email address

# link text to edit email address
profileEditEmailLinkAlert = Note: it takes a minute or longer for $$directoryName$$ changes to reflect in $$serviceNameCap$$.

# if the user is not enrolled and required to enroll, then dont send them in the endless loop to the online directory
profileEditEmailLinkAlertCant = Note: Please finish your Two-Step Verification enrollment before attempting to change your email address. After enrollment is complete, you may go to www.upenn.edu/directory and click Update Directory listings to edit your email address.

# suffix of edit email link
profileEditEmailSuffix = )

# label for first phone number
profilePhoneNumberLabel1 = Phone number

# label for second phone number
profilePhoneNumberLabel2 = Phone number

# label for third phone number
profilePhoneNumberLabel3 = Phone number

# label for option of voice phone number
profilePhoneVoiceOptionLabel = Voice

# label for option of text phone number
profilePhoneTextOptionLabel = Text

# label for auto voice text
profilePhoneAutoVoiceText = Auto voice / text

# label for auto voice text
profilePhoneAutoVoice1 = Voice to phone number 1

# label for auto voice text
profilePhoneAutoVoice2 = Voice to phone number 2

# label for auto voice text
profilePhoneAutoVoice3 = Voice to phone number 3

# label for auto voice text
profilePhoneAutoText1 = Text to phone number 1

# label for auto voice text
profilePhoneAutoText2 = Text to phone number 2

# label for auto voice text
profilePhoneAutoText3 = Text to phone number 3

# label for first friend
profileFriendLabel1 = Friend

# label for second friend
profileFriendLabel2 = Friend

# label for third friend
profileFriendLabel3 = Friend

# label for fourth friend
profileFriendLabel4 = Friend

# label for fifth friend
profileFriendLabel5 = Friend

# label for identifying the phone numbers
profileErrorLabelPhone1 = first phone number
profileErrorLabelPhone2 = second phone number
profileErrorLabelPhone3 = third phone number

# if submitting profile and not enough lifelines
profileErrorNotEnoughLifelines = You must specify at least two ways to help you if you are having problems logging in. You can enter two phone numbers, or one phone number and one friend.
profileErrorNotEnoughPhones = You must specify at least one phone number.

# if profile saved successfully
profileSuccessMessage = Your changes have been saved.

# profile phone numbers saved successfully
profileSubmitPhonesSuccessMessage = Your changes have been saved.

# profile friends saved successfully
profileSubmitFriendsSuccessMessage = Your changes have been saved.

# profile email saved successfully
profileSubmitEmailSuccessMessage = Your changes have been saved.

# error email is required
profileErrorEmailRequired = Email is required.

# error email is invalid
profileErrorEmailInvalid = Email is invalid.

# if a phone number has invalid chars
# the label is in ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel}
profileErrorPhoneInvalidChars = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} contains invalid characters. Please use only digits, space, plus, and dash.

# if the phone is longer than 10 or starts with a 1 then must have a plus
profileErrorPhoneLongAndInternational = Error the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must be 10 digits for US-based phones or start with a + and country code for international numbers.  Do not start with a + and 0.

# if there is a phone number then you need to check text or voice
profileErrorTextOrVoiceRequired = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have text or voice checked.

# if there is something checked but no number
profileErrorNumberRequiredIfChecked= Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have a phone number entered if text or voice is checked.

#if one of the friends is invalid
profileErrorFriend1invalid = Error: the first friend was not found or not valid. Please select a result from the combobox before saving the profile.
profileErrorFriend2invalid = Error: the second friend was not found or not valid. Please select a result from the combobox before saving the profile.
profileErrorFriend3invalid = Error: the third friend was not found or not valid. Please select a result from the combobox before saving the profile.
profileErrorFriend4invalid = Error: the fourth friend was not found or not valid. Please select a result from the combobox before saving the profile.
profileErrorFriend5invalid = Error: the fifth friend was not found or not valid. Please select a result from the combobox before saving the profile.

# e.g. if you pick first voice and there is no first phone number with voice checked
profileAutoVoiceTextInvalid = Error: the auto voice / text selection is not a valid phone.  Change your selection or edit the phones in your profile.

profileErrorFriendIsSelf = Error: you cannot select yourself as a friend

# subtext helper text for combobox for friend combo search
profileFriendComboSubtext = Enter a name to search for a friend

# subtext helper text for drop down to pick auto voice text
profilePhoneAutoVoiceSubtext = Select a phone to auto voice/text to during login to $$ssoSystemName$$.  Note, there is a maximum of 5 calls/texts per day.

# Voice to phone 2151234567
profilePhoneAutoVoiceTextToPhone = to phone

########################################
## Untrust browsers
########################################

# Not sure why a user would see this, only hackers
untrustBrowserErrorNotOptedIn = Warning: you are not enrolled in $$serviceNameCap$$

# Success message when browsers are untrusted. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
untrustBrowserSuccess = Your ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers == 1 ? ' is now untrusted' : 's are now untrusted'}


#########################################
## Emails
#########################################


# Email subject and body sent to people who opt in
emailOptInSubject = $$institutionName$$ $$serviceNameCap$$ - you have enrolled
emailOptInBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nThank you for enrolling in $$serviceNameCap$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will be routinely prompted for a $$codeName$$.\n\nYou can accept push notifications or generate codes on your phone using Duo Mobile. Make sure you also print out single-use verification codes in case you don't have access to that device (on the "Manage settings" page, click "Generate codes.")\n\nRemember to keep your profile updated with backup phone numbers (to which single-use codes can be sent) and friends you can authorize to retrieve a code if all else fails.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people who opt in
emailChangeCodeSubject = $$institutionName$$ $$serviceNameCap$$ - you have changed your secret
emailChangeCodeBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have changed your secret in $$serviceNameCap$$.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people who opt out
emailOptOutSubject = $$institutionName$$ $$serviceNameCap$$ - you are unenrolled
emailOptOutBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have unenrolled from $$serviceNameCap$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$ unless the service requires it or your job requires you to be enrolled..\nYou can always re-enroll at $$docUrl$$.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# opted out by admin
emailOptOutByAdminSubject = $$institutionName$$ $$serviceNameCap$$ - you have been unenrolled by an administrator
emailOptOutByAdminBody = Dear $$institutionName$$ $$serviceNameCap$$ user,\n\nYou have been unenrolled from $$serviceNameCap$$ by administrator: ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$ unless the service requires it or your job requires you to be enrolled.\nYou can always re-enroll at $$docUrl$$.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# generate code by admin
emailGenerateCodeByAdminSubject = $$institutionName$$ $$serviceNameCap$$ - you have requested a single-use verification code from an administrator
emailGenerateCodeByAdminBody = Dear $$institutionName$$ $$serviceNameCap$$ user,\n\nYou have requested a $$serviceNameCap$$ single-use verification code from an administrator: ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nThis code must be used within 10 minutes or it will expire.  All previous administrator-generated codes are now invalid.  For security reasons the code is not included in this email.  You can use this code to access ${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly} to generate additional codes which do not expire.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people adding a phone
emailAddPhoneSubject = $$institutionName$$ $$serviceNameCap$$ - you have added a phone
emailAddPhoneBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have added a phone application for $$serviceNameCap$$.\n\nYou can generate codes on existing phones or devices and this new phone or other device using Duo Mobile or another authenticator app.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people adding a phone
emailAddTotpSubject = $$institutionName$$ $$serviceNameCap$$ - you have added a TOTP application e.g. Google Authenticator
emailAddTotpBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have added a TOTP application (e.g. Google Authenticator) for $$serviceNameCap$$.\n\nYou can generate codes on existing phones or devices and this new phone or other device using Duo Mobile or another authenticator app.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people who are selected as a friend
emailFriendSubject = $$institutionName$$ $$serviceNameCap$$ - you can help a friend
emailFriendBody = Dear ${twoFactorRequestContainer.twoFactorProfileContainer.twoFactorUserFriend.name},\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} has identified you as a friend who can help in case of trouble logging in using $$serviceNameCap$$.\n\nShould help be needed, ${twoFactorRequestContainer.twoFactorUserLoggedIn.name} will use a $$serviceNameCap$$ web page to authorize you to assist.\n\nIf you are contacted to provide help, please go to ${twoFactorRequestContainer.twoFactorConfigContainer.appUrlBase}twoFactorUi/app/UiMain.helpColleague and follow the instructions to generate a one-time code for them.\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} can provide this URL again when contacting you for help.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people unenrolled by a friend
emailOptOutFriendSubject = $$institutionName$$ $$serviceNameCap$$ - you have been unenrolled by a friend
emailOptOutFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nYou have been unenrolled from $$serviceNameCap$$ at your request by ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nEach time you authenticate with your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$ unless the service requires it or your job requires you to be enrolled..\nYou can always re-enroll at $$docUrl$$.\n\nFor more information about $$serviceNameCap$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body send to people generated a code by a friend
emailGenerateCodeFriendSubject = $$institutionName$$ $$serviceNameCap$$ - your friend generated a code for you
emailGenerateCodeFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nA $$serviceNameCap$$ code has been generated at your request by ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nYou can use this code to generate more codes.\n\nFor more information about $$serviceNameCap$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people who are required to be enrolled but aren't
emailUsersRequiredToBeOptedInSubject = $$institutionName$$ $$serviceNameCap$$ - you are required to enroll
emailUsersRequiredToBeOptedInBody = Dear ${twoFactorRequestContainer.twoFactorWsRequestContainer.tfRestRequiredUser.name},\n\nAs part of your job responsibilities at the $$institutionName$$, you are required to enroll in $$serviceNameCap$$.\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email admin or user when too many wrong bdays
emailWrongBdaySubject = $$institutionName$$ $$serviceNameCap$$ - too many wrong attempts to specify your birthday
emailWrongBdayBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou or someone else had too many failed attempts to specify your birthday for $$serviceNameCap$$.  You cannot enroll until tomorrow.\n\nIf this was not you, or there is a data problem please email:\n$$supportEmailAddress$$\n\nFor more information about $$serviceNameCap$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameCap$$. Send feedback to:\n$$supportEmailAddress$$\n\n



###########################################
## Duo push
###########################################

# explanation of duo push
duoPushExplanation = Duo Mobile is an app that simplifies $$serviceNameCap$$ &mdash; just tap "Approve" on the notice sent ("pushed") to the app on your phone or mobile device. Then, instead of entering a verification code, simply wait for the web-page to refresh.<br /><br />Duo Mobile can also generate single-use verification codes (like Google Authenticator). So you can use it even when your mobile device doesn't have access to an Internet connection or cell service.<br /><br />When enrolled in Duo Mobile, you can still use other $$serviceNameCap$$ methods as well (printed codes, keychain fob, etc.).

#duo Doc url
duoDocUrl = http://somethingAtYourSchoolOverrideThis

# install text if not enrolled
duoPushExplanationInstall = <br /><br /><a class="tfLinkButton" style="font-size: smaller" href="$$duoDocUrl$$">Install the Duo Mobile app</a>

# button for duo push
buttonDuoPush = Duo Mobile

# if going to duo screen and not enrolled
duoErrorNotOptedIn = Error: not enrolled in $$serviceNameCap$$

# title on the reports index page
duoPushTitle = $$serviceNameCap$$ Duo Mobile

# subheader on duo page
duoPushSubheader = Manage Duo Mobile

# subheader if enrolling
duoPushSubheaderEnroll = Enroll in Duo Mobile

# if has a phone for push
duoPushEnrolledText = You are enrolled in Duo Mobile.

# if has a phone for push
duoPushNotEnrolledText = You are not enrolled in Duo Mobile.

# test that duo push works
buttonDuoPushTest = Test Duo Push feature

# error not enrolled in Duo push
duoErrorNotInPush = Error: you are not enrolled in Duo Mobile

# error not enrolled in Duo push
duoErrorWithPush = Error: could not send a Duo mobile push

# error not enrolled in Duo push
phoneCodeDoesntMatchError = Error: could not validate phone code

# duo push worked
duoPushTestSuccess = Duo Push test was successful

# duo push didnt work
duoPushTestFailure = Duo Push test was not successful

# unenroll from duo push
buttonDuoPushUnenroll = Unenroll from Duo Mobile

# enroll in duo push
buttonDuoPushEnroll = Enroll in Duo Mobile

# enroll instructions before the QR code
duoPushEnrollInstructionsStart = To enroll in Duo Mobile, follow these steps:<br /><br /><b>Step 1 of 3:</b>  <a class="tfLinkButton" href="$$duoDocUrl$$">Install the Duo Mobile app</a><br /><br /><b>Step 2 of 3:</b> Activate the app.<br /><br /><div style="padding-left:5em">Open the app on your phone or device, tap "Add Account" (or the plus button) and scan this QR code:<br /><br /><br />

# if the QR code cannot be scanned, this will give instructions
duoPushEnrollUrl = If you cannot scan the QR code, enter this URL:<br />${twoFactorRequestContainer.twoFactorDuoPushContainer.duoQrUrlText}

# enroll instructions after the QR code
duoPushEnrollInstructionsEnd = <br /><br />Do not store the QR code anywhere except in this device.</div><br /><b>Step 3 of 3:</b> <form action="../../twoFactorUi/app/UiMain.duoPushTest" method="post" style="display: inline"><input value="Test the activation" class="tfLinkButton" type="submit" /></form><br /><br /><div style="padding-left:5em">When you scan the QR code, Duo Mobile activates a $$institutionName$$ account for you and sends a "push" notice ("log in request") to your device. You will see a message that a request is waiting.  Tap the message to reveal the notice, and then tap the "Approve" button.<br /><br />A success message should appear at the top of this page.<br /><br />Your enrollment is not complete until you test the activation.</div>

# use duo push for web
buttonDuoPushByDefaultForWeb = Use Duo Push for web authentications

# dont use duo push for web 
buttonDuoPushDontByDefaultForWeb = Stop using Duo Push for web authentications

# success message when unenrolled from duo
duoPushUnenrollSuccess = Success: you have been unenrolled from Duo Mobile

# error if enrolling but already enrolled
duoErrorAlreadyInPush = Error: you are already enrolled in Duo Mobile

# note at top of screen for push
duoPushEnrolling = Note: you are enrolled in Duo Mobile. Scan the barcode with the Duo Mobile app.

# instructions for installing duo mobile
duoPushEnrollInstructions = Press the "Add Account" button in the Duo Mobile app and scan the QR image below.  Test your enrollment below when done. 

# instructions for Duo push for web
duoPushEnrolledInPushForWeb = Duo Push is enabled for $$ssoSystemName$$. When you're prompted for $$serviceNameCap$$ from $$ssoSystemName$$, tap "Approve" in the Duo Mobile app on your mobile device. Note: if you do not have your mobile device you can still use other single-use verification codes.

# not enrolled in duo push for web
duoPushNotEnrolledInPushForWeb = You have not enabled Duo Push for $$ssoSystemName$$. If you enable it, when you are prompted for $$serviceNameCap$$ from $$ssoSystemName$$, you can simply tap to "Approve" a push message in the Duo Mobile app on your mobile device, without having to enter a single-use verification code. Note, if you do not have your mobile device you can still use other $$codesName$$.

# unenroll from web authn duo push
buttonDuoPushUnenrollWeb = Unenroll from Duo Push for $$ssoSystemName$$

# enroll in web authn duo push
buttonDuoPushEnrollWeb = Enroll in Duo Push for $$ssoSystemName$$

# success message for duo push from two step
duoPushEnrollWebSuccess = Success: you are now enrolled in Duo Push for $$ssoSystemName$$

# success message for no more duo push from two step
duoPushUnenrollWebSuccess = Success: you are now unenrolled from Duo Push for $$ssoSystemName$$

# displayed to users in web transactions for duo push (before the word Request, default is "Login")
duoPushWebPrompt = Click 'Approve' in the $$serviceNamePrefixLower$$ prompt

###########################################
## Optin wizard
###########################################

# title bar in browser for optin welcome wizard screen
optinWelcomeTitle = $$serviceNameCap$$: Enroll - authenticate

# title bar in browser for optin welcome wizard screen
optinDoneTitle = $$serviceNameCap$$: Enrollment complete

# header for two step
optinDoneSubheader = Success: you are now enrolled in $$serviceNameCap$$

# hide birthday dropdowns
optinBirthdayHide = hide

# show birthday dropdowns
optinBirthdayShow = show

# title bar in browser for optin select type wizard screen
optinSelectTypeTitle = $$serviceNameCap$$: Select method

# subheader for opting in to two factor
optinSelectTypeSubheader = Enroll: step 5 of 9 - select method

# label next to radio
optinTypeLabel = $$serviceNameCap$$ type

# phone app label
optinTypeAppLabel = Phone app

# phone app help
optinTypeAppHelp = Use the Duo app on your phone to help you log in.  This is the easiest and recommended option. You can get codes even without cell service or wifi.

# text/voice label
optinTypePhoneLabel = Text or phone call

# text/voice label
optinTypePhoneHelp = If you do not have a smart phone, you can have codes sent via text or voice call. Note that Penn is charged for each text or call.

# text/voice label
optinTypeFobLabel = Keychain fob

# text/voice label
optinTypeFobHelp = You or your department can buy a $$serviceNameCap$$ fob from the $$institutionName$$ Bookstore for approximately $20.  This device will display your verification codes.

# birthday error
optinNeedsBirthDayUuid = Please re-enter your birthday and start over

# title bar in browser for optin install app wizard screen
optinAppInstallTitle = $$serviceNameCap$$: Enroll - install Duo Mobile app

# header to install the phone app
optinAppInstallSubheader = Enroll: step 6 of 9 - install Duo Mobile app
optinAppInstallSubheader2 = Duo: step 1 of 3 - install Duo Mobile app

# text for app install
optinAppInstallText = <a href="#" onclick="$('#duoInstallStepsId').toggle('slow'); return false;">Open your phone's app store and install the free Duo Mobile app</a><div id="duoInstallStepsId" style="display: none"><br /><br /><img src="../../assets/duoInstallSteps.jpg" alt="Screenshots showing how to install Duo" /> </div><br /><br />If you need more information see the <a href="https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile" target="_blank">Duo documentation</a>

# title of totp app install title
optinTotpAppInstallTitle = $$serviceNameCap$$: Enroll - install Google Authenticator app

# header to install the phone app
optinTotpAppInstallSubheader = Enroll: step 9 of 12 - install Google Authenticator app

# text for app install
optinTotpAppInstallText = Duo Mobile is $$institutionName$$'s preferred $$serviceNameCap$$ app.  Google Authenticator or most other TOTP or HOTP apps will work too.<br /><br /><br />Open your phone's app store and install the free <a href="#" onclick="$('#duoInstallStepsId').toggle('slow'); return false;">Duo Security</a> or <a href="#" onclick="$('#googleInstallStepsId').toggle('slow'); return false;">Google Authenticator app</a> (or another TOTP/HOTP app)<div id="duoInstallStepsId" style="display: none"><br /><br /><img src="../../assets/duoInstallSteps.jpg" alt="Screenshots showing how to install Duo" /> </div> <div id="googleInstallStepsId" style="display: none"><br /><br /><img src="../../assets/googleInstallSteps.jpg" alt="Screenshots showing how to install Google Authenticator" /> </div><br /><br /><br />If you need more information see the <a href="https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile" target="_blank">Duo documentation</a> or <a href="https://support.google.com/accounts/answer/1066447?hl=en" target="_blank">Google Authenticator documentation</a>

# title of totp app install title
optinTotpAppInstallSelectTypeTitle = $$serviceNameCap$$: Enroll - install Google Authenticator - select type

# header to install the phone app
optinTotpAppInstallSelectTypeSubheader = Enroll: step 7 of 12 - install Google Authenticator - select type

# text for app install
optinTotpAppInstallSelectTypeText = It is recommended that you use a generated secret value.  An advanced option is to enter the secret value.

# type for generated secret
optinTotpAppInstallGeneratedLabel = Generated secret value

# help text for generated secret
optinTotpAppInstallGeneratedHelp = (Recommended) Use a secret value generated by the system

# type for inputted secret
optinTotpAppInstallUploadedLabel = Enter secret value

# type for inputted secret
optinTotpAppInstallUploadedHelp = (Advanced) Enter a secret value from your phone app

# title of totp app install title
optinTotpAppUploadSecretTitle = $$serviceNameCap$$: Enroll - install Google Authenticator - enter secret value

# header to install the phone app
optinTotpAppUploadSecretSubheader = Enroll: step 8 of 12 - install Google Authenticator - enter secret

# text for app install
optinTotpAppUploadSecretText = Enter the secret value from the app.  Note: hex and base32 formats are accepted and auto-detected. 

# secret label
optinTotpAppUploadSecretLabel = Secret value

# title bar in browser for optin integrate app wizard screen
optinAppIntegrateTitle = $$serviceNameCap$$: Enroll- integrate app

# header to install the phone app
optinAppIntegrateSubheader = Enroll: step 7 of 9 - integrate Duo Mobile app
optinAppIntegrateSubheader2 = Duo: step 2 of 3 - integrate Duo Mobile app

# text for app install
optinAppIntegrateTextRelated =
optinAppIntegrateText = <a href="#" onclick="$('#duoOpenId').toggle('slow'); return false;">Open the Duo Mobile app on your phone</a><div id="duoOpenId" style="display: none"><br /><br /><img src="../../assets/duoOpen.jpg" alt="Screenshots showing how to open Duo" /> </div><br /><br />If you have previously enrolled and already have a $$duoIntegrationListing$$ listing in Duo $$optinAppIntegrateTextRelated$$, <a href="#" onclick="$('#duoDeleteStepsId').toggle('slow'); return false;">delete that listing</a><div id="duoDeleteStepsId" style="display: none"><br /><br /><img src="../../assets/duoDeleteSteps.jpg" alt="Screenshots showing how to remove a Duo listing" /> </div><br /><br /><a href="#" onclick="$('#duoAddStepsId').toggle('slow'); return false;">Select "add" and then scan this QR code</a><div id="duoAddStepsId" style="display: none"><br /><br /><img src="../../assets/duoAddSteps.jpg" alt="Screenshots showing how to add a Duo listing" /> </div>

# text for app install below
optinAppIntegrateTextBottom = If you need more information see the <a href="https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile" target="_blank">Duo Mobile documentation</a>

# QR code in QR image
optinAppIntegrateQrAlt = QR code

# link to use google authenticator or TOTP app instead
optinTotpInstallLink = Use Google Authenticator (or another TOTP/HOTP app) instead

# title bar in browser for optin integrate app wizard screen
optinTotpAppIntegrateTitle = $$serviceNameCap$$ Enroll: integrate Google Authenticator (or other TOTP app)

# error message for uploaded secret
optinTotpAppUploadSecretRequired = The secret value is required

# header to install the phone app
optinTotpAppIntegrateSubheader = Enroll: step 10 of 12 - integrate Google Authenticator (or other TOTP app)

# text for app install
optinTotpAppIntegrateText = <a href="#" onclick="$('#googleAuthOpenId').toggle('slow'); return false;">Open the Google Authenticator app on your phone</a><div id="googleAuthOpenId" style="display: none"><br /><br /><img src="../../assets/googleAuthOpen.jpg" alt="Screenshots showing how to open Google Authenticator" /> </div><br /><br />If you have previously enrolled and already have a $$duoIntegrationListing$$-related listing in Google Authenticator, <a href="#" onclick="$('#googleDeleteStepsId').toggle('slow'); return false;">delete that listing</a><div id="googleDeleteStepsId" style="display: none"><br /><br /><img src="../../assets/googleDeleteSteps.jpg" alt="Screenshots showing how to delete a Google listing" /> </div><br /><br /><a href="#" onclick="$('#googleAddStepsId').toggle('slow'); return false;">Add a new listing and then scan this QR code</a><div id="googleAddStepsId" style="display: none"><br /><br /><img src="../../assets/googleAddSteps.jpg" alt="Screenshots showing how to add a Google listing" /> </div>

# text below the QR code
optinTotpAppIntegrateTextBottom = If you cannot scan the QR code you can enter this code: <b>${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretTempUnencryptedFormatted}</b> (Base32), account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)} <br /><br />If you need more information, see the <a href="https://support.google.com/accounts/answer/1066447?hl=en" target="_blank">Google Authenticator</a> documentation

# title bar in browser for optin test push wizard screen
optinAppTestTitle = $$serviceNameCap$$ Enroll: test Duo Mobile app 

# header to test push
optinAppTestSubheader = Enroll: step 8 of 9 - test Duo Mobile app
optinAppTestSubheader2 = Duo: step 3 of 3 - test Duo Mobile app

# text for test push
optinAppTestText = A "push" notification has been sent to your phone<br /><br /><a href="#" onclick="$('#duoApprovePushStepsId').toggle('slow'); return false;">Your phone should prompt you to "Approve" the push</a>.  If you are not prompted, open the Duo Mobile app.  If you still don't see the notification, swipe down on the Duo app to prompt it to look for the push.<br /><br /><a href="#" onclick="$('#duoApprovePushStepsId').toggle('slow'); return false;">Approve the push</a>.  Note: only accept pushes that you initiate.<div id="duoApprovePushStepsId" style="display: none"><br /><br /><img src="../../assets/duoAcceptPushSteps.jpg" alt="Screenshots showing how to approve a Duo push" /> </div><br /><br /><br />If you need more information see the <a href="https://duo.com/product/trusted-users/two-factor-authentication/duo-mobile" target="_blank">Duo documentation</a>

# text when error confirming the push
optinAppTestErrorText = There was an error checking for the push confirmation. Please try again.

# text when push times out
optinAppTestErrorTimeoutText = There was an error checking for the push confirmation since it timed out. Please try again.

# title bar in browser for optin test push wizard screen
optinPrintCodesTitle = $$serviceNameCap$$: Enroll - print single-use codes

# header to test push
optinPrintCodesSubheader = $$serviceNameCap$$: print single-use codes

# text for test push
optinPrintCodesText = You are enrolled in $$serviceNameCap$$<br /><br />You can use these codes if your primary verification method (phone, fob, etc.) is not available. Use each code once in sequence.<br /><br />Print these codes or keep them in a safe place.

# title bar in browser for phone install wizard screen
optinPhoneInstallTitle = Enroll: step 6 of 9 - select phone

# header for phone install
optinPhoneInstallSubheader = $$serviceNameCap$$: select phone

# text for test push
optinPhoneInstallText = Click on one of the 'text' or 'voice' buttons below.<br /><br />A nine digit code will be sent to that phone number now.<br /><br />Each time you log in to $$ssoSystemName$$ you will get a voice call or text to the number you select supplying a nine-digit verification code to enter.

# title bar in browser for phone install wizard screen
optinConfirmPhoneCodeTitle = $$serviceNameCap$$: Enroll - confirm phone code

# header for phone install
optinConfirmPhoneCodeSubheader = Enroll: step 7 of 9 - confirm phone code

# text for test push
optinConfirmPhoneCodeText = Enter the nine-digit code that was just sent to your phone

# title bar in browser for totp install wizard screen
optinTotpAppConfirmCodeTitle = $$serviceNameCap$$: Enroll - confirm Google Authenticator code

# header for totp confirm
optinTotpAppConfirmCodeSubheader = Enroll: step 11 of 12 - confirm Google Authenticator code

# text for totp confirm
optinTotpAppConfirmCodeText = Enter the <a href="#" onclick="$('#googleGetCodeHelpId').toggle('slow'); return false;">six-digit code displayed by Google Authenticator</a>
optinTotpAppConfirmCodeText2 = <div id="googleGetCodeHelpId" style="display: none"><br /><br /><img src="../../assets/googleGetCodeSteps.jpg" alt="Showing how to get a code displayed by google authenticator" /> </div>

# title bar in browser for optin select type wizard screen
optinProfilePhoneTitle = $$serviceNameCap$$: Enroll - phones

# subheader for opting in to two factor
optinProfilePhoneSubheader = Enroll: step 3 of 9 - phones

# profile phones text
optinProfilePhoneText = It is recommended that you enter at least two phone numbers. If you do not have your $$serviceNameCap$$ device, you can request a call or text to one of these numbers to be able to log in.<br /><br /><b>Note:</b> Two total lifelines (i.e., phones and friends) should be entered.  If you choose not to enter any friends on the next page, you should enter two phones below.  If you are new to Penn and do not have a phone, you can enroll now, and come back to <a href="${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</a> to setup two lifelines.<br /><br /><b>Note:</b> International numbers must start with a plus, then country code, and phone number, e.g. +44 12 34 567890

# title bar in browser for optin select type wizard screen
optinProfileFriendTitle = $$serviceNameCap$$: Enroll - friends

# subheader for opting in to two factor friends
optinProfileFriendSubheader = Enroll: step 4 of 9 - friends

# profile friends text
optinProfileFriendText = Identify friends who will be able to help you if you do not have your $$serviceNameCap$$ device. Each friend must be a $$institutionName$$ affiliate with a PennKey.<br /><br /><b>Note:</b> Two total lifelines (i.e. phones and friends) are needed. If you haven't included a second phone number, you should specify at least one friend.  If you are new to Penn and do not have a phone, you can enroll now, and come back to <a href="${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</a> to setup two lifelines.

# title bar for register keychain fob
optinFobRegisterTitle = $$serviceNameCap$$: register keychain fob 

# subheader for register keychain fob
optinFobRegisterSubheader = Enroll: step 6 of 7 - register keychain fob

# register fob text
optinFobRegisterText = <a href="#" onclick="$('#fobHelpId').toggle('slow'); return false;">Enter the serial number</a> from the sticker on the keychain fob purchased at the $$institutionName$$ bookstore.  <a href="#" onclick="$('#fobHelpId').toggle('slow'); return false;">Press the button and enter six-digit code</a>.  Then wait 30 seconds, press the button, and <a href="#" onclick="$('#fobHelpId').toggle('slow'); return false;">enter the next (different) six-digit code</a>.  <div id="fobHelpId" style="display: none"><br /><br /><img src="../../assets/fobHelp.jpg" alt="Showing how to input the fob serial number and two codes" /> </div>

# register fob text
optinFobRegisterLabel = Serial number

# register fob text
optinFobCode1Label = Six-digit code

# register fob text
optinFobCode2Label = Next six-digit code

# title bar in browser for optin select type wizard screen
optinProfileEmailTitle = $$serviceNameCap$$: Enroll - email

# subheader for opting in to two factor
optinProfileEmailSubheader = Enroll: step 2 of 9 - email

# text for email page
optinProfileEmailText = Your email address will be used to confirm changes to your $$serviceNameCap$$ account.

# title of phone code screen
phoneIndexTitle = $$serviceNameCap$$: Send voice/text code

# subheader for getting a phone code
phoneIndexSubheader = $$serviceNameCap$$: send voice/text code

# instructions for getting phone code
phoneIndexInstructions = Send a single-use code to your backup phone


###########################################
## LSP Rescue
###########################################

# title bar in browser for admins to confirm user
adminConfirmUserTitle = $$serviceNameCap$$: Confirm user

# subheader for admins to confirm user
adminConfirmUserSubheader = $$serviceNameCap$$: confirm user

# text to confirm user
adminConfirmUserText = You must confirm the identity of the user.

# title bar in browser for admins to confirm user
adminManageUserTitle = $$serviceNameCap$$: confirm remote user

# subheader for admins to confirm user
adminManageUserSubheader = $$serviceNameCap$$: confirm remote user

# text to check id
adminConfirmCheckId = See user in person and check ID?

# text to check name
adminConfirmName = <i>Please spell your name.</i>  Does it match?

# text to check dept title
adminConfirmDepartmentTitle = <i>What $$institutionName$$ organization are you affiliated with?</i> Does it match?

# text for pennid
adminConfirmPennid = <i>What is your Penn ID (from PennCard)?</i>

# text for pennkey
adminConfirmPennkey = <i>What is your PennKey?<i>

# text for birth date
adminConfirmBirthdate = <i>What is your birth date?</i>

# text for last four
adminConfirmLastFour = <i>What is your SSN (last four)?</i>

# last four mask for birthdates
lastFourMask = (mm/dd/yyyy)

# text for last four
adminConfirmYes = Yes
adminConfirmNo = No

# if the user did not select yes or no
adminManageUserCheckedIdRequired = Select Yes or No to confirm whether you have seen the user in person and checked their ID

# title bar in browser for admins to confirm remote user
adminConfirmUserRemoteTitle = $$serviceNameCap$$: Administration - confirm remote user

# subheader for admins to confirm remote user
adminConfirmUserRemoteSubheader = $$serviceNameCap$$: administration - confirm remote user

# text for user to confirm remote user
adminConfirmUserRemoteText = Ask these questions to confirm the user's identity.

# error messages for confirm remote screen
adminConfirmRemotePennIdIncorrect = ERROR: Penn ID is incorrect
adminConfirmRemotePennkeyIncorrect = ERROR: Pennkey is incorrect
adminConfirmRemoteBirthdayIncorrect = ERROR: Birthday is incorrect
adminConfirmRemoteLastFourIncorrect = ERROR: Last four is incorrect
adminConfirmRemoteNameIncorrect = ERROR: Name not correct or missing
adminConfirmRemoteDeptIncorrect = ERROR: Department not correct or missing
adminConfirmRemoteNameCorrect = SUCCESS: Name is correct
adminConfirmRemoteDeptCorrect = SUCCESS: Department is correct
adminConfirmRemotePennIdCorrect = SUCCESS: Penn ID is correct
adminConfirmRemotePennkeyCorrect = SUCCESS: Pennkey is correct
adminConfirmRemoteBirthdayCorrect = SUCCESS: Birthday is correct
adminConfirmRemoteLastFourCorrect = SUCCESS: Last four is correct
adminConfirmCheckedPhysicalId = SUCCESS: Checked the user's physical ID

# recommendation
adminConfirmRemoteRecommendYes = The identity was confirmed
adminConfirmRemoteRecommendNo = The identity was NOT confirmed.  Caution: only proceed if you are sure the user is who they say they are.

