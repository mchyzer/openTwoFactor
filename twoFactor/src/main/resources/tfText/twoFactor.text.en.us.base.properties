# The text config uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from the base file
# (which should not be edited), and the override overlays
# the base settings. See the twoFactor.text.en.us.base.properties for the possible
# settings that can be applied to the twoFactor.text.en.us.properties
# you can use ${' '} to put a space at start or end since values are trimmed

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:tfText/twoFactor.text.en.us.base.properties, file:c:/temp/tfText/twoFactor.text.en.us.properties
text.config.hierarchy = classpath:tfText/twoFactor.text.en.us.base.properties, classpath:tfText/twoFactor.text.en.us.properties

# seconds between checking to see if the config files are updated
text.config.secondsBetweenUpdateChecks = 60


## English language, US locale
## You can leave this file alone, and override in twoFactor.text.en.us.properties

############################################
## Common text
############################################

# SSO system name
ssoSystemName = WebLogin

# Name of the username
netId = NetID

# In H1's at the top of each page
pageHeader = $$ssoSystemName$$

# service name with first letter cap
serviceNameCap = Two-step verification

# service name prefix lower
serviceNamePrefixLower = two-step

# service name lower case
serviceNameLower = two-step verification

# override this and put your institution name here, e.g. for Penn, we put: Penn
institutionName = Open Two Factor

# url to documentation about the service
docUrl = https://my.institution.edu/twostep/

# url of how to install apps at your institution
docAppUrl = https://support.google.com/accounts/answer/1066447?hl=en

# email address for support or feedback
supportEmailAddress = twostep-help@my.instition.edu

# name of the 6 digit code
codeName = single-use verification code

# name of the 6 digit codes
codesName = single-use verification codes

# simple yes or no
yes = yes
no = no

# buttons
buttonLogOut = Log out
buttonOptOut = Opt out
buttonOptOutConfirm = Are you sure you want to opt out?
buttonChangeDevice = Add phone or device
buttonOptIn = Opt in
buttonProfile = Profile
buttonGenerateCodes = Generate codes
buttonUntrustBrowsers = Untrust browsers
buttonUntrustBrowsersConfirm = Are you sure you want to untrust all browsers?
buttonUntrustBrowsersNone = No trusted browsers found
buttonActivity = Activity
buttonHelpFriend = Help a friend
buttonAdminConsole = Admin console
buttonManageSettings = Manage settings
buttonHavingTrouble = I am having trouble logging in
buttonContinue = Continue
buttonCancel = Cancel
buttonSubmit = Submit
buttonAdd = Add
buttonEdit = Edit
buttonAdminHome = Admin home
buttonAdminEmailAll = Email all users
buttonAdminImportSerials = Import fob serials
buttonAdminReportAdmin = Setup reports
buttonViewReports = View reports

# when searching in combobox, you need 2 or more characters
comboNotEnoughChars = Enter 2 or more characters for searching...

############################################
## Admin reports
############################################

# title on the reports index page
adminReportsIndexTitle = $$serviceNameCap$$ admin reports index

# subheader on the reports index page
adminReportsIndexSubheader = $$serviceNameCap$$ admin reports index

# instructions on reports index page
adminReportsIndexInstructions = Select which reports part you would like to edit

# edit reports button
buttonReportsEdit = Edit reports

# edit report privileges button
buttonReportsPrivilegesEdit = Edit report privileges

# edit report privileges button
buttonReportsRollupsEdit = Edit report rollups

############################################
## Admin reports edit
############################################

# title on the reports edit page
adminReportsEditTitle = $$serviceNameCap$$ admin edit reports

# subheader on the reports edit page
adminReportsEditSubheader = $$serviceNameCap$$ admin edit reports

# instructions on reports edit page
adminReportsEditInstructions = Add, edit, or delete reports

# Columns on edit report table (or labels to insert or edit)
adminReportsEditColNameFriendly = Name
adminReportsEditColNameSystem = Key
adminReportsEditColType = Type

# edit/delete button to delete a report
adminReportsEditDeleteButton = Delete
adminReportsEditEditButton = Edit

# confirm delete of report
adminReportsEditDeleteConfirm = Are you sure you want to delete this report?

# if the report cant be found (why would this happen?)
adminReportsEditReportNotFound = Error: report not found

# cant delete report if foreign keys exist
adminReportsEditReportCantDeleteChildRollups = Error: cannot delete report since it has child rollups.  Delete those first
adminReportsEditReportCantDeleteParentRollups = Error: cannot delete report since it has parent rollups.  Delete those first
adminReportsEditReportCantDeletePrivileges = Error: cannot delete report since it has privileges.  Delete those first

# success delete
adminReportsEditReportDeleteSuccess = Success: you deleted the report

# add a new report button
adminReportsEditAddNewReport = Add new report

# report type select of group or rollup
adminReportsEditTypeGroup = Group
adminReportsEditTypeRollup = Rollup

# name system if manual
adminReportsEditOrManualNameSystem = or manual:

# added a report success
adminReportsEditAddSuccess = Success: added report
adminReportsEditEditSuccess = Success: edited report

# validations on new or edited report
adminReportsEditErrorKeySelectAndManual = Error: select a key from the select or type one in but not both
adminReportsEditErrorKeyRequired = Error: enter a key
adminReportsEditErrorNameRequired = Error: name required
adminReportsEditErrorTypeRequired = Error: type required
adminReportsEditErrorNameExists = Error: name already exists
adminReportsEditErrorKeyExists = Error: key already exists
adminReportsEditErrorGroupTypeChildExists = Error: cannot change type to group if there are rollup children for this report

############################################
## Admin reports privileges
############################################

# title on the reports privileges page
adminReportsPrivilegesTitle = $$serviceNameCap$$ admin reports privileges

# subheader on the reports privileges page
adminReportsPrivilegesSubheader = $$serviceNameCap$$ admin reports privileges

# instructions on reports privileges page
adminReportsPrivilegesInstructions = Add or delete report privileges

# Columns on edit report privilege table (or labels to insert or edit)
adminReportsPrivilegesColReport = Report
adminReportsPrivilegesColUser = User

# confirm on delete privilege
adminReportsPrivilegeDeleteConfirm = Are you sure you want to delete this privilege?

# validations on new privilege
adminReportsPrivilegesErrorReportRequired = Error: select a report
adminReportsPrivilegesErrorUserRequired = Error: select a user from the search results
adminReportsPrivilegesErrorPrivilegeExists = Error: that privilege already exists

# success messages for privilege editing
adminReportsPrivilegeAddSuccess = Success: added report privilege
adminReportsPrivilegeDeleteSuccess = Success: deleted report privilege


############################################
## Admin reports rollups
############################################

# title on the reports rollups page
adminReportsRollupsTitle = $$serviceNameCap$$ admin reports rollups

# subheader on the reports rollups page
adminReportsRollupsSubheader = $$serviceNameCap$$ admin reports rollups

# instructions on reports rollups page
adminReportsRollupsInstructions = Add or delete report rollups

# Columns on edit report rollups table (or labels to insert or edit)
adminReportsRollupsColParentReport = Parent report
adminReportsRollupsColChildReport = Child report

# confirm on delete rollup
adminReportsRollupsDeleteConfirm = Are you sure you want to delete this rollup?

# validations on new rollup
adminReportsRollupsErrorChildReportRequired = Error: select a child report
adminReportsRollupsErrorParentReportRequired = Error: select a parent report
adminReportsRollupsErrorRollupExists = Error: that rollup already exists
adminReportsRollupsErrorParentCantBeChild = Error: parent cannot be same as child
adminReportsRollupsErrorCircularReference = Error: that rollup would create a circular reference so it cannot be created

# success messages for rollup editing
adminReportsRollupsAddSuccess = Success: added report rollup
adminReportsRollupsDeleteSuccess = Success: deleted report rollup

############################################
## View reports
############################################

# title on the view reports page
viewReportsTitle = $$serviceNameCap$$ reports

# subheader on the reports page
viewReportsSubheader = $$serviceNameCap$$ reports

# instructions on reports page
viewReportsInstructions = View enrollment reports

# Columns/labels on view report table
viewReportsLabelReportName = Report name
viewReportsLabelSubreportName = Subreport name
viewReportsButtonViewReport = View report
viewReportsLabelTotal = Total people
viewReportsLabelNumberNotOptedIn = Total not opted in
viewReportsLabelPercentageOptedIn = Percent opted in
viewReportsLabelSubjectsNotOptedIn = People not opted in

# logged in subject must be opted in and have reports to view
viewReportsErrorLoggedInSubjectNotOptedIn = Error: you must be opted in to $$serviceNameLower$$ to see reports
viewReportsErrorLoggedInSubjectHasNoReports = Error: there are no reports you are allowed to view
viewReportsErrorReportNotFound = Error: report could not be found, select one to view

# overall stats
viewReportsOptedInUsersPrefix = Overall system opted-in users:
viewReportsOptedOutUsersPrefix = Overall system opted-out users:

 
############################################
## Banner: commonBanner.jsp
############################################

# banner at top, url
bannerUrl = http://www.school.edu/

# switch this for your institution's image
bannerImageUrl = ../../assets/Open_Two_Factor2.gif

# alt of banner image
bannerImageAlt = University of School

# name of directory in institution
directoryName = directory

############################################
## Add phone or device page: addPhoneOrDevice.jsp
############################################

# title for add phone or device page
addPhoneOrDeviceTitle = $$serviceNameCap$$ add phone or device

# header for add phone or device
addPhoneOrDeviceSubheader = Add phone or device

# wizard question for add phone or device
addPhoneOrDeviceInstructions = Note, if you want to add a text or voice phone number to get codes when you are having trouble, <a href="UiMain.profileView">edit your profile</a>.  What would you like to add?

# button to add phone with app
addPhoneOrDevicePhoneButton = Add phone with app

# button to add a device
addPhoneOrDeviceDeviceButton = Add device (e.g. keychain fob)

# button to cancel to return to the manage settings screen
addPhoneOrDeviceCancelButton = Cancel

# confirm to add device
addPhoneOrDeviceDeviceConfirm = You cannot add a device with the same secret with which you are currently opted in.  To add a device, you will be opted out, and previously opted-in phones or devices will need to be opted in again (if applicable).  Are you sure you want to opt out devices and proceed to opt in again?

# if user not opted in when adding phone or device
addPhoneOrDeviceNotOptedIn = You must be opted in to add a phone or device

##############################################
## Add phone: addPhone.jsp
##############################################

# title bar in browser for addPhone screen
addPhoneTitle = $$serviceNameCap$$ Add phone

# subheader for addPhone in to two factor
addPhoneSubheader = $$serviceNameCap$$: Add phone

# step 1 description
addPhoneStep1description = <b>Step 1 of 3:</b> <a href="$$docAppUrl$$">Install an authenticator app</a> on your mobile device.

# step 1 indented subdescription
addPhoneStep1substep = Once activated, your app will display a verification code that changes at frequent intervals.  

# step two header
addPhoneStep2description = <b>Step 2 of 3:</b> Activate the app(s).

# step 2 activate an app
addPhoneStep2activateApp = Activate an app

# content that shows when you click the activate an app button
addPhoneStep2activateContent = Scan the <a href="#qrCode">QR code below</a> or enter this secret value into your device:<br /><br /><b>${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretUnencryptedFormatted}</b><br />(Base32 for most authenticator apps.<br />Account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}. Select "time based".)<br /><br />Do not store this QR code or secret value anywhere except in this device.

# link to show advanced stuff
addPhoneStep2advancedLink = Other options

# suffix on link to show advanced stuff
addPhoneStep2advancedSuffix = )

# label on the hex secret
addPhoneHexLabel = (Hex code to enter into your Yubikey if applicable)

# bottom of activate token
addPhoneStep2activateTokenBottom = Store this secret value in a secure place.

# bottom of the step 2 part
addPhoneStep2bottom = Do not store this QR code or secret value anywhere except in this device.

# description of 3rd step to addPhone
addPhoneStep3description = <b>Step 3 of 3:</b> Test the activation.

# substep in step 3
addPhoneStep3substep = Enter the digits displayed by the authenticator app.

# step 3 code label
addPhoneStep3codeLabel = Enter six or nine digits

# step 3 code button submit
addPhoneStep3codeButton = Test and continue

# cancel the addPhone process, go back to main two-step page
addPhoneCancelButton = Cancel

# if things go wonky or hacker
addPhoneSubmitErrorInconsistent = Inconsistent state, please start over.

# if things go wonky or hacker
addPhoneError = There was an error processing your request.

# error if they submit without entering a code
addPhoneErrorCodeRequired = Activation code required.

# error if they submit an invalid code
addPhoneErrorCodeInvalid = Activation code invalid.  If you are having trouble with an app and you scanned the QR code, try entering it manually.

# code is successful when adding a device
addPhoneSuccess = Successfully added.

############################################
## Index page: twoFactorIndex.jsp
############################################

# title in browser on index page
indexTitle = $$serviceNameCap$$ settings

# subheader in bold if user is opted in
indexOptedInSubheader = $$serviceNameCap$$ settings

# subtext on index page if user is opted in
indexOptedInSubtext = Use buttons below to opt out of the service, edit recovery contact details, generate new $$codesName$$, untrust previously trusted browsers, view your recent $$serviceNameLower$$ activity, or help a friend who's having trouble logging in.

# subheader in bold if user is not opted in
indexNotOptedInSubheader = $$serviceNameCap$$

# text below subheader if user is not opted in
indexNotOptedInSubtext1 = Protect your $$netId$$ by using both your password and a code generated on your phone or device.

# link to opt in to two factor
indexNotOptedInLoginLink = Opt in to this service

# if not opted in, this is subtext
indexNotOptedInSubtext2 = <h4>How it works</h4><ol><li>Enter your $$netId$$ and password as usual.</li><li>When prompted, enter a code from your phone or other device.</li><li>Make your browser trusted (optional). If no one else uses that browser, you only need to enter a code every 30 days.</li></ol><h4>Why you should use it</h4><br />$$serviceNameCap$$ dramatically reduces the risk of someone stealing your data and your $$institutionName$$ identity. Even if they acquire your password, they still can't log in unless they also have your device.

#############################################
## Common about: commonAbout.jsp at bottom of screen
#############################################

aboutUrl = $$docUrl$$

aboutLinkText = Learn more about $$serviceNameLower$$



#############################################
## Profile instructions: profileInstructions.jsp
#############################################

profileInstructionsOptedInTop = To opt in to this service you need a profile.<br /><br />You also need an email address of record in the $$directoryName$$.<br /><br />

profileInstructionsMain = You <b>must</b> have an email address in the $$directoryName$$ <b>and</b> choose at least two ways to help yourself in case of problems. So designate at least two phone numbers, two friends, or one of each.<br /><br />We can use your email address to notify you of updates and remind you of your settings. If you have trouble logging in, we can send a $$codeName$$ to the backup phone(s) you list below (via test or voice). You can use that code to log in once.<br /><br />You can also identify one or more friends who may be authorized to opt you out of the service if you are having trouble logging in. Each should be someone who knows your voice, will answer your call, and is willing to help. To identify a friend, enter a $$netId$$, then select the correct person from the list that appears. (They will be notified by email that you have selected them.)

#############################################
## Misc messages
#############################################

# if there is a maximum number of users in this service in the config file: twoFactorServer.max.registrations, which has been reached, then dont allow new users
cantOptInSinceTooManyUsers = This service is closed to new users. Email <span style="white-space: nowrap;">$$supportEmailAddress$$</span> to register your interest in $$serviceNameLower$$

# if there is a maximum number of users in this service in the config file: twoFactorServer.max.registrations, which has been reached, then dont allow new users
cantOptInSinceNotActive = This service is for active faculty, students, and staff.



#############################################
## Admin screen: admin.jsp
#############################################

# title at top of browser
adminTitle = $$serviceNameCap$$ admin

# subheader in bold below header
adminSubheader = $$serviceNameCap$$ admin

# prefix before opted in users report
adminOptedInUsersPrefix = Opted-in users:

# prefix before opted out users report
adminOptedOutUsersPrefix = Opted-out users:

# person to manage label in admin screen
adminPersonToManage = Person to manage

# label next to the combobox to find the person to backdoor as
adminPersonToBackdoorAs = Person to backdoor as

# if the user is already enrolled, this will show the users name, then this text
adminIsAlreadyEnrolledInThisService = is currently enrolled in this service

# the button to opt out a user will say this text, then the user's name
adminOptOutPerson = Opt out

# confirm message prefix+suffix to see if admin really wants to opt out a user
adminOptOutConfirm = Are you sure you want to opt out ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# confirm message prefix+suffix to see if admin really wants to generate code
adminGenerateCodeConfirm = Are you sure you want to generate code for ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# untrust browsers for user prefix for button to untrust
adminUntrustBrowsersFor = Untrust browsers for

# generate code for user prefix for button
adminGenerateCodeFor = Generate one time code for

# confirm message prefix+suffix for admin to untrust someone's browsers
adminUntrustConfirm = Are you sure you want untrust browsers for ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}?

# username is not currently enrolled, everything but username
adminNotEnrolled = is not currently enrolled in this service.

# suffix if admin console but user is not an admin
adminErrorUserNotAdmin = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorUserLoggedIn.name, true)} is not an admin

# if operating on a user, and it is blank, this is the error
adminErrorUserToOperateOnIsRequired = You must specify a user

# note sure why this would happen since there is a combobox, but if the user is not found, this is the error
adminErrorUserToOperateOnNotFound = Person not found

# if someone picked from the combobox is not in the system (never opted in), this is error message suffix
adminErrorUserToOperateOnNotInSystem = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name, true)} has never opted in

# if opting out a user, but they weren't opted in, this is the message prefix+suffix. Note, not sure why this would happen.
adminErrorUserWasNotOptedIn = Warning: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name, true)} was not opted in to $$serviceNameCap$$

# when a user was opted out of two factor successfully, this is message suffix
adminOptOutUserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)} was opted out of $$serviceNameCap$$

# Success message suffix when untrusting browsewrs. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
adminUntrustBrowserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)}'s ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser(s) are now untrusted

# Success message when generating a code for the user.  the code is in twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneCodeUnencryptedIfNotExpired
adminGenerateCodeForUserSuccess = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name, true)} has a new temporary (expires in 10 minutes) one-time use code: ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.phoneCodeUnencryptedIfNotExpired}.  The user can login to ${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly} and generate 10 more codes.

##############################################
## Admin email all users
##############################################

# title at top of browser
adminEmailAllTitle = $$serviceNameCap$$ admin email all

# subheader in bold below header
adminEmailAllSubheader = $$serviceNameCap$$ admin email all opted in users

# label for if the email should be sent
adminEmailAllReallySend = Send email?

# label for the body of the email
adminEmailAllEmailSubject = Email subject

# label for the body of the email
adminEmailAllEmailBody = Email body

# validation errors
adminEmailAllErrorNoSubject = Subject is required
adminEmailAllErrorNoBody = Body is required
adminEmailAllErrorNoLoggedInUsers = There are no opted in users found

adminEmailAllEmailNotSentPrefix = Email would have been sent to (bcc):
adminEmailAllEmailSentPrefix = Email was sent to (bcc):

auditsSendEmailToAllUsersSuccess = Email was sent to ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users
auditsSendEmailToAllUsersNotSentSuccess = Email would have been sent to ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users

##############################################
## Admin import fob serials
##############################################

# title at top of browser
adminImportSerialsTitle = $$serviceNameCap$$ admin import fob serial numbers

# subheader in bold below header
adminImportSerialsSubheader = $$serviceNameCap$$ admin import fob serial numbers

# describe the page
adminImportSerialsInstructions = Paste in a CSV with two columns, one with column: serialNumber, one with column: secret

# error if columns arent correct
adminImportSerialsErrorColumns = Make sure one column is: serialNumber, and another column is: secret

# error on row for serial import
adminImportSerialsErrorOnRow = Error on row ${twoFactorRequestContainer.twoFactorAdminContainer.importFobLineNumber}, serial: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importSerial, true)}: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importFobError, true)}

# label for fob serial numbers an CSV
adminImportSerialsLabelSerials = Fob serial numbers <br />and secrets CSV:

# user cannot import serials
adminImportSerialsErrorUserNotImportSerials = You cannot import serials

# import was blank
adminImportSerialsSerialsBlank = Enter some serials comma separated

# is there is a header row
adminImportSerialsLabelSerialHeader = Has header row?

# description in audits
auditsImportSerialsDescription = Imported ${twoFactorRequestContainer.twoFactorAdminContainer.importFobCount} fob serials successfully, had ${twoFactorRequestContainer.twoFactorAdminContainer.importFobErrors} errors

# dont use a sample secret or serial
adminImportSerialsNoSamples = Do not use a sample serial or secret

# cant import this secret since it already exists
adminImportSerialsSecretExists = Cannot import this secret since it already exists

# cant import this serial number since it already exists
adminImportSerialsSerialExists = Cannot import this serial number since it already exists

##############################################
## Recent history: userAudits.jsp
##############################################

# title in browser
auditsTitle = $$serviceNameCap$$ history

# subtitle in bold below the header
auditsSubheader = $$serviceNameCap$$ history

# prefix before the name
auditsNamePrefix = Recent $$serviceNameLower$$ actions are shown for

#suffix after name
auditsNameSuffix = .

# paragraph 2 of audits page
auditsNameParagraph2 = Browser and operating system are reported by the browser.

# in audit console, actions displayed to user
auditsGenerateSingleUseCodes = Generate single-use codes
auditsAssignProfileEmailFromSubject = Assign email from $$directoryName$$

# in the description of this, it will be audited
auditsAssignProfileEmailFromSubjectBlank = none
auditsAssignProfileEmailFromSubjectPrefix1 = From:
auditsAssignProfileEmailFromSubjectPrefix2 = , to:

auditsError = Error
auditsImportFobSerials = Import fob serials
auditsSendEmailToAllUsers = Send email to all users
auditsSendTestEmailToAllUsers = Test email to all users
auditsSendEmailToAllUsersDescription = Email for ${twoFactorRequestContainer.twoFactorAdminContainer.adminEmailNumberOfUsers} users
auditsSendCodeToPhone = Send code to a phone
auditsErrorAuthenticating = Error authenticating
auditsFriendOptedMeOut = Friend opts me out
auditsOptedOutFriend = Opt out a friend
auditsViewProfile = View profile
auditsEditProfile = Edit profile
auditsTwoStepAuthentication = $$serviceNameCap$$
auditsTwoStepAuthenticationForbidden = $$serviceNameCap$$ forbidden
auditsTwoStepAuthenticationRequired = $$serviceNameCap$$ required
auditsAllowWithError = Allow with error
auditsTrustedBrowserUse = Trusted browser use
auditsNonTwoStepAuthentication = Non-two-step verification
auditsAddPhone = Add phone
auditsAddPhoneTest = Test code after add phone
auditsOptIn = Opt in
auditsInviteFriendsToOptMeOut = Authorize friends to opt me out
auditsOptInStep1 = Opt in (step 1)
auditsOptOut = Opt out
auditsUntrustBrowsers = Untrust browsers
auditsWrongCode = Wrong verification code
auditsInvalidateSingleUseCodes = Invalidate single-use codes
auditsRegisterFobBySerial = Register device by serial number
auditsAdminReportEdit = Admin edit reports
auditsAdminGenerateCode = Admin generate code for user
auditsReportView = View report
auditsDuoEnablePushForWeb = Duo push for $$ssoSystemName$$ enable
auditsDuoDisablePushForWeb = Duo push for $$ssoSystemName$$ disable
auditsDuoPushEnable = Duo push enable
auditsDuoPushDisable = Duo push enable
auditsDuoPushEnableTestSuccess = Duo push test success
auditsDuoPushEnableTestFailure = Duo push test failure
auditsStopOptInRequirement = Stop opt in requirement

############################################
## Audits include page: auditsInclude.jsp
############################################

# when there are no audits
auditsNoAudits = There are no recent audit records available.

# headers for audit table
auditsHeaderDate = Date
auditsHeaderAction = Action
auditsHeaderIpAddress = IP address
auditsHeaderDomainName = Domain name
auditsHeaderOperatingSystem = Operating system
auditsHeaderBrowser = Browser
auditsHeaderTrustedBrowser = Trusted browser checked?
auditsHeaderUserLoggedIn = User logged in
auditsHeaderDescription = Description


##############################################
## Show one time codes: showOneTimeCodes.jsp
##############################################

# title in browser, note, this is printed out, so you want the user to know what
# the codes are for. At Penn, we have: Penn two-step verification codes
codesTitle = $$institutionName$$ $$serviceNameLower$$ codes

# subtitle below the header
codesSubheader = $$serviceNameCap$$: generate codes

# paragraphs in codes page
codesParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ below to log in.

codesParagraph2 = Print the codes and instructions now using your browser, and keep them safe.

codesParagraph3 = You can use each code once, in sequence. If you forget which code you used last, enter any <b>two</b> unused codes in sequence (separated by a space). If you lose your printed codes, or use them all, go to the "Manage settings" page and click the "Generate codes" button to create a new set. Any previously unused codes will be invalidated.

# label above the codes
codesLabel = Currently valid codes:

# instructions on the printed paper for codes
codesPrintedInstructions = You can use each code once in sequence. If you<br /> forget which code you used last, enter any <b>two</b><br /> unused codes in sequence (separated by a space).

# can't show codes if not opted in, generally this will be seen by hackers only
codesErrorAlreadyOptedIn = You are not opted in!

###########################################
## Having trouble logging in
###########################################

# on the having trouble screen, this is in bold below the header
havingTroubleSubheader = $$serviceNameCap$$: trouble logging in

# on the having trouble screen, descriptive text
havingTroubleParagraph1 = Trouble logging in? You have three options:<br/ ><br /><ol class="bold"><li><b>Enter the next unused single-use code on your printed list, generated when you opted in or later from the "Manage settings" page.</b></li><br /><li><b>Send a single-use code to your backup phone:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# before the authorizing friends part
havingTroubleParagraph2 = </div></li><li><b>Authorize previously identified friends to opt you out of $$serviceNameLower$$:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# after the friends part
havingTroubleParagraph2end = </div></li></ol>

# message saying the user is enrolled in the service
havingTroubleEnrolled = You are currently enrolled in this service

# having trouble voice label before the phone number
havingTroubleVoicePrefix = Voice:

# having trouble text label before the phone number
havingTroubleTextPrefix = Text:

# having trouble no phone numbers message
havingTroubleNoPhoneNumbers = You have not entered any phone numbers, so you cannot get a single-use code by phone

# Label for the list of friends someone can/has selected
havingTroubleFriendsInvitedSubtitle = You have authorized these friends to opt you out:
havingTroubleFriendsNotInvitedSubtitle = You can authorize these friends to opt you out:

# button text to authorize friend(s) to opt you out
havingTroubleAllowFriendButton = Authorize friend(s) to opt you out

# before the link to authorize friend(s), this is the text
havingTroubleAllowFriendsPrefix = To be opted out of two-step verification,

# to authorize friend(s), this is the link
havingTroubleAllowFriendsLink = authorize your friend(s) to opt you out.

# to allow friends, this is the suffix after the link
havingTroubleAllowFriendsSuffix = Then call one of the friends listed above, ask them to log in to <span style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</span>, click "Manage settings" and then click "Help a friend" to opt you out.

# if authorized friends, this is the paragraph
havingTroubleYouHaveAllowedFriendParagraph = To be opted out of two-step verification, call one of the friends listed above, ask them to log in to <span style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</span>, click "Manage settings" and then click "Help a friend" to opt you out.

# if there are no friends who can opt the user out
havingTroubleNoFriends = You have not identified anyone you can authorize to opt you out.

# if the user is not enrolled in two factor
havingTroubleNotEnrolled = You are not currently enrolled in this service.

# success message for authorizing friends
havingTroubleAuthSuccess = You have authorized friends to opt you out.

# audit message prefix for code sent to phone, after this will be 3#####, the first digit will show, but not subsequent ones
havingTroubleAuditPrefix = Code sent to phone:

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsnt = You are required to be opted in to $$serviceNameCap$$ but you are not opted in.  It is recommended that you opt in to $$serviceNameCap$$.

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsntButton = Temporarily remove requirement to be opted in

# screen message when user is not opted in but is required
havingTroubleRequiredToOptInButIsntMessage = Success: you are now not required to be opted in to $$serviceNameCap$$.  Tomorrow morning you be required to opt in again.  Wait 5 minutes before logging in for the changes to take effect.

# text message prefix to use
havingTroubleTextPrefix = Your $$institutionName$$ $$serviceNamePrefixLower$$ temporary verification code is:

# voice message prefix to use
havingTroubleVoicePrefix = Your $$institutionName$$ $$serviceNamePrefixLower$$ temporary verification code is:
havingTroubleVoiceInfix = Again,

#############################################
## Help friend screen: helpColleague.jsp
#############################################

# title at top of browser
helpFriendTitle = $$serviceNameCap$$: help a friend

# subheader in bold below header
helpFriendSubheader = $$serviceNameCap$$: help a friend

# first paragraph of text for help a friend
helpFriendParagraph1 = Anyone who enrolls in two-step verification may identify one or more friends who can be authorized to opt them out of the service. Should they ever be without a valid verification code, they can click "Trouble logging in?" from the $$ssoSystemName$$ screen and authorize their friends to opt them out. They may then contact one of their authorized friends to complete the process.

# second paragraph of text for help a friend
helpFriendParagraph2 = If you have been authorized to opt someone out of two-step verification, a button will appear below allowing you to do so. Should you receive a request, be sure to verify the requester's identity. Voice recognition is best; email can be forged.

# third paragraph of text for help a friend
helpFriendParagraph3 = The following people have authorized you to opt them out:

# third paragraph of text for help a friend
helpFriendListNotAuthorized = The following people have identified you as friends but have not yet authorized you to opt them out:

# prefix before name for help a colleague
helpFriendCheckboxPrefix = I have verified${' '}

# suffix after name for help a colleague
helpFriendCheckboxSuffix = 's identity by sight or voice.

# prefix of button to opt out friend (the name will be after this)
helpFriendOptOutButtonPrefix = Opt out

# confirm message prefix+suffix when you want to opt someone out (insert name)
helpFriendOptOutConfirmPrefix = Are you sure you want to opt out
helpFriendOptOutConfirmSuffix = ?

# if no one has selected this person as a friend
helpFriendNoAuthorizedFriends = No one has identified you to be authorized to opt them out of $$serviceNameLower$$.

# if no one has selected this person as a friend
helpFriendNoIdentifiedFriends = No one has identified you in their profile.

# if the user selected hasn't allowed friends to opt them out. Generally only hackers will see this
helpFriendErrorUserDidntAllow = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} must authorize selected friends to opt them out.

# if the user didnt check the checkbox on the screen
helpFriendErrorUserDidntCheckCheckbox = You must check the checkbox signifying that you have verified ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)}'s identity by sight or voice.

# if the user selected hasnt selected this user as friend. Generally only hackers will see this
helpFriendErrorUserNotFriend = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} must authorize you to opt them out.

# this can happen if another friend opted them out or they got out some other way
helpFriendWarnNotOptedIn = ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} was not currently opted in to $$serviceNameLower$$.

# prefix+suffix of success message after opting out friend (insert name)
helpFriendSuccess = Success: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name, true)} has been opted out of $$serviceNameLower$$.

# audit message description success before name
helpFriendAuditDescriptionPrefix = Opt out

# audit message the friend will see before name
helpFriendAuditDescriptionForFriendPrefix = Opt-out by


##############################################
## Optin: optin.jsp
##############################################

# title bar in browser for optin screen
optinTitle = $$serviceNameCap$$ ${twoFactorRequestContainer.twoFactorUserLoggedIn.optedIn ? 'Reset enrollment' : 'Opt in'}

# subheader for opting in to two factor
optinSubheader = $$serviceNameCap$$: opt in

# step 1 description
optinStep1description = <b>Step 1 of <span class="serialClass" style="display: none">2</span><span class="secretClass">3</span>:</b> <a href="$$docAppUrl$$">Install an authenticator app</a> on your mobile device or obtain a hardware token.

# if you are opted in when you go to the opt in screen
optinStep1optedIn = You must opt out before you can opt in

# close button in corner of optin step boxes
optinStepClose = Close

# how to register question on option screen
optinStep2howToRegisterToken = How do you want to register your token?

# if registering with serial number
optinStep2registerWithSerialNumber = Enter the token's serial number (e.g. for tokens purchased from the bookstore)

# if registering with a secret from device
optinStep2registerWithSecret = Enter the token's secret

# if registering with a serial number
optinStep2labelSerialNumber = Token serial number

# label for 6 digit code
optinStep2labelCode = Enter six digit code

# help text for the 6 digit code
optinStep2helpCode = Enter the digits displayed by the token

# help text for the serial number
optinStep2helpSerial = Enter the serial number on a sticker on the token

# button for step 2 serial numbers
optinStep2serialNumberButton = Test and continue

# step two header
optinStep2description = <b>Step 2 of <span class="serialClass" style="display: none">2</span><span class="secretClass">3</span>:</b> Activate the token and/or app(s).

# step 2 activate a token
optinStep2activateToken = Activate a hardware token

# step 2 activate an app
optinStep2activateApp = Activate an app

# step 2 opt in with a phone
optinStep2optinPhone = Optin with a phone

# content that shows when you click the activate an app button
optinStep2activateContent = Scan the <a href="#qrCode">QR code below</a> or enter this secret value into your device:<br /><br /><b>${twoFactorRequestContainer.twoFactorUserLoggedIn.twoFactorSecretTempUnencryptedFormatted}</b><br />(Base32 for most authenticator apps.<br />Account name: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorProfileContainer.accountName, true)}. Select "time based".)<br /><br />Do not store this QR code or secret value anywhere except in this device.<br /><br />Note: if you want to use both a hardware token and an app, you must submit the token's secret value before activating the app.

# content that shows when you optin with phone
optinStep2phoneContent = Click on one of the 'text' or 'voice' buttons below.  A six digit code will be sent to that phone number.  Type in the six digit code in step 3 below.

# if there is no phone you cant opt in with a phone
optinStep2phoneNoPhone = Error: you must have at least one phone registered in your profile

# link to show advanced stuff
optinStep2advancedLink = Other options

# suffix on link to show advanced stuff
optinStep2advancedSuffix = )

# label on the hex secret
optinHexLabel = (Hex code to enter into your Yubikey if applicable)

# bottom of activate token
optinStep2activateTokenBottom = Store this secret value in a secure place.

# label to submit the custom secret (advanced)
optinStep2customSecretLabel = Enter the secret value that came with the token

# buttom to submit custom secret
optinStep2submitCustomSecretButton = Submit secret value

# description on advanced sumit secret token dialogue
optinStep2advancedCustomSecretDescription = Enter secret value from Deepnetsecurity or Gemalto keychain TOTP token, or any OATH HOTP or TOTP 30 second or 60 second token.  Store this secret value in a secure place.  Note: hex and base32 formats are accepted and auto-detected.

# bottom of the step 2 part
optinStep2bottom = Do not store this QR code or secret value anywhere except in this device.

# if serial number is required
optinErrorSerialRequired = Error: serial number is required.

# if the serial number could not be found
optinErrorSerialNotFound = Error: the serial number you entered could not be found.  Either you need to try again, or the device has not been registered in the system.

# if the serial number (or secret?) was registered to someone else
optinErrorSerialRegisteredToSomeoneElse = Error: the serial number you are registering has been registered to someone else and can only be used by that person.

# if the serial number (or secret?) was registered to someone else
optinErrorSecretRegisteredToSomeoneElse = Error: the secret you are registering belongs to a device that has been registered to someone else and can only be used by that person.

# if the fob was registered when opted in by a user
optionStep2auditRegisterFob = Opted in registered device with serial number: ${twoFactorServerUtils.xmlEscape(twoFactorRequestContainer.twoFactorAdminContainer.importSerial, true)}

# description of 3rd step to optin
optinStep3description = <b>Step 3 of 3:</b> Test the activation.

# substep in step 3
optinStep3substep = Enter the digits displayed by the authenticator app or token.<br />(If activating both, enter digits from the token):

# step 3 code label
optinStep3codeLabel = Enter six or nine digits

# step 3 code button submit
optinStep3codeButton = Test and continue

# at the bottom of step 3
optinStep3bottom = Your enrollment is not complete until you test the activation.

# cancel the optin process, go back to main two-step page
optinCancelButton = Cancel

# if things go wonky or hacker
optinSubmitErrorInconsistent = Inconsistent state, please start over.

# error if they submit without entering a code
optinErrorCodeRequired = Activation code required.

# error if they submit an invalid code
optinErrorCodeInvalidFromSerial = Activation code invalid.  Please try again, make sure the serial number and 6 digit code are correct.<br /><br />If you are having trouble try entering 12 digits at once: two sequential codes together (wait 30 seconds between pressing the button).

# error if they submit an invalid code
optinErrorCodeInvalid = Activation code invalid.  If you are having trouble with an app and you scanned the QR code, try entering it manually. <br /><br />If you are having trouble with a keychain HOTP fob try entering 12 digits at once: two sequential codes together (wait 30 seconds between pressing the button).

# if submitting a custom secret, then the textfield is required, this is the error message
optinErrorCustomSecretRequired = Custom secret is a required field.

# if submitting a custom secret, must be alphanueric or whitespace, if invalid chars, this is the error message
optinErrorCustomSecretInvalid = Invalid custom secret: should be alphanumeric or whitespace.  Please try again.

# not sure why this would happen, but custom secret has a minimum length, e.g. 6 chars
optinErrorCustomSecretNotLongEnough = Custom secret not long enough.

# if opting in, and email is required, this is the error message if the user doesn't have an email address
optinErrorEmailRequired = Email address required to opt-in.

# when submitting a secret value, this is the success message
optinSubmitSecretValueSuccess = Your secret value has been submitted. If you are also activating an app, follow the instructions below now. Otherwise, <a href="#step3">proceed to Step 3</a>

##############################################
## Successful opt in: optinSuccess.jsp
##############################################

# after successfully opting in, this is the subheader below the header on the page
optinSuccessSubheader = $$serviceNameCap$$

# message after successfully opting in
optinSuccessMessage = You have successfully enrolled in $$serviceNameLower$$.

# paragraph 1 on optin success page
optinSuccessParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ generated below to log in.

# paragraph 2 on optin success page
optinSuccessParagraph2 = <a href="../../twoFactorUi/app/UiMain.showOneTimeCodes">Generate a list of single-use codes and instructions</a> now using your browser. Print them and keep them with you in case you are without a working phone.<br /><br />Finally, log out and log back in to access resources that require $$serviceNameLower$$.


#############################################
## If opting out
#############################################

# if opting out and not opted in, this should only appear to hackers
optoutErrorNotOptedIn = Alert: you have not opted in to this service.

# just opted out message
optoutSuccessMessage = You have been opted out of $$serviceNameLower$$


#############################################
## Phone codes: nonTwoFactorPhoneCode.jsp
#############################################

# title at top of browser
phoneCodeTitle = $$serviceNameCap$$ phone code

# subheader in bold below header
phoneCodeSubheader = $$serviceNameCap$$ code sent to your phone

# paragraph for phone code sent to phone
phoneCodeParagraph1 = To use the code sent to your phone, navigate to a protected web resource and begin the log-in process again. After authenticating with your $$netId$$ and password, you will be prompted for a $$serviceNameLower$$ code, and you can enter the one sent to your phone. <br /><br/>You can also use the code to opt out of $$serviceNameLower$$. To do so, click the "Manage settings" link in the footer at the bottom of this page. When prompted for a $$serviceNameLower$$ code, enter the one on your phone. On the "Manage settings" page, click the button labeled "Opt out."


##############################################
## Profile edit screen: profile.jsp
##############################################

# title at top of browser
profileTitle = $$serviceNameCap$$ profile

# edit profile subheader below the header
profileSubheader = $$serviceNameCap$$ profile

# label for opt in type
profileOptinType = Opt in type

# label on radio to opt in for all
profileOptinRadioForAll = Opt in for all applications (most secure option)

# label on radio to opt in for all
profileOptinRadioIfRequired = Opt in for only applications that require $$serviceNameCap$$

# label for email field
profileEmailLabel = Email

# prefix of edit email link
profileEditEmailPrefix = (

# link to edit email address
profileEditEmailLinkUrl = https://directory.school.edu/editProfile

# link text to edit email address
profileEditEmailLinkText = edit email address

# link text to edit email address
profileEditEmailLinkAlert = Note: it takes a minute or longer for $$directoryName$$ changes to reflect in $$serviceNameLower$$.

# suffix of edit email link
profileEditEmailSuffix = )

# label for first phone number
profilePhoneNumberLabel1 = Phone number

# label for second phone number
profilePhoneNumberLabel2 = Phone number

# label for third phone number
profilePhoneNumberLabel3 = Phone number

# label for option of voice phone number
profilePhoneVoiceOptionLabel = Voice

# label for option of text phone number
profilePhoneTextOptionLabel = Text

# label for auto voice text
profilePhoneAutoVoiceText = Auto voice / text

# label for auto voice text
profilePhoneAutoVoice1 = Voice to phone number 1

# label for auto voice text
profilePhoneAutoVoice2 = Voice to phone number 2

# label for auto voice text
profilePhoneAutoVoice3 = Voice to phone number 3

# label for auto voice text
profilePhoneAutoText1 = Text to phone number 1

# label for auto voice text
profilePhoneAutoText2 = Text to phone number 2

# label for auto voice text
profilePhoneAutoText3 = Text to phone number 3

# label for first friend
profileFriendLabel1 = Friend

# label for second friend
profileFriendLabel2 = Friend

# label for third friend
profileFriendLabel3 = Friend

# label for fourth friend
profileFriendLabel4 = Friend

# label for fifth friend
profileFriendLabel5 = Friend

# label for identifying the phone numbers
profileErrorLabelPhone1 = first phone number
profileErrorLabelPhone2 = second phone number
profileErrorLabelPhone3 = third phone number

# if submitting profile and not enough lifelines
profileErrorNotEnoughLifelines = You must specify at least two ways to help you if you are having problems logging in. You can enter two phone numbers, two friends, or one of each.

# if profile saved successfully
profileSuccessMessage = Your changes have been saved.

# error email is required
profileErrorEmailRequired = Email is required.

# error email is invalid
profileErrorEmailInvalid = Email is invalid.

# if a phone number has invalid chars
# the label is in ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel}
profileErrorPhoneInvalidChars = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} contains invalid characters. Please use only digits, space, plus, and dash.

# if a phone number is too short
# the label is in ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel}
profileErrorPhoneTooShort = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must be at least 10 digits.

# if there is a phone number then you need to check text or voice
profileErrorTextOrVoiceRequired = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have text or voice checked.

# if there is something checked but no number
profileErrorNumberRequiredIfChecked= Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have a phone number entered if text or voice is checked.

#if one of the friends is invalid
profileErrorFriend1invalid = Error: the first friend was not found. Please select a result from the combobox before saving the profile.
profileErrorFriend2invalid = Error: the second friend was not found. Please select a result from the combobox before saving the profile.
profileErrorFriend3invalid = Error: the third friend was not found. Please select a result from the combobox before saving the profile.
profileErrorFriend4invalid = Error: the fourth friend was not found. Please select a result from the combobox before saving the profile.
profileErrorFriend5invalid = Error: the fifth friend was not found. Please select a result from the combobox before saving the profile.

# e.g. if you pick first voice and there is no first phone number with voice checked
profileAutoVoiceTextInvalid = Error: the auto voice / text selection is not a valid phone.  Change your selection or edit the phones in your profile.

profileErrorFriendIsSelf = Error: you cannot select yourself as a friend

# subtext helper text for combobox for friend combo search
profileFriendComboSubtext = Enter a name to search for a friend

# subtext helper text for drop down to pick auto voice text
profilePhoneAutoVoiceSubtext = Select a phone to auto voice/text to during login to $$ssoSystemName$$.  Note, there is a maximum of 5 calls/texts per day.

# Voice to phone 2151234567
profilePhoneAutoVoiceTextToPhone = to phone

########################################
## Untrust browsers
########################################

# Not sure why a user would see this, only hackers
untrustBrowserErrorNotOptedIn = Warning: you were not opted in to $$serviceNameCap$$

# Success message when browsers are untrusted. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
untrustBrowserSuccess = Your ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers == 1 ? ' is now untrusted' : 's are now untrusted'}


#########################################
## Emails
#########################################


# Email subject and body sent to people who opt in
emailOptInSubject = $$institutionName$$ $$serviceNameLower$$ - you have opted in
emailOptInBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nThank you for opting in to $$serviceNameLower$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will be routinely prompted for a $$codeName$$.\n\nYou can generate codes on your phone or other device using Google Authenticator. Make sure you also print out single-use codes in case you don't have access to that device (on the "Manage settings" page, click "Generate codes.")\n\nRemember to keep your profile updated with backup phone numbers (to which single-use codes can be sent) and friends you can authorize to opt you out of the service if all else fails.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people who opt out
emailOptOutSubject = $$institutionName$$ $$serviceNameLower$$ - you have opted out
emailOptOutBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have opted out of $$serviceNameLower$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# opted out by admin
emailOptOutByAdminSubject = $$institutionName$$ $$serviceNameLower$$ - you have been opted out by an admin
emailOptOutByAdminBody = Dear $$institutionName$$ $$serviceNameLower$$ user,\n\nYou have opted out of $$serviceNameLower$$ by admin: ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# generate code by admin
emailGenerateCodeByAdminSubject = $$institutionName$$ $$serviceNameLower$$ - you have requested a one-time use code from an admin
emailGenerateCodeByAdminBody = Dear $$institutionName$$ $$serviceNameLower$$ user,\n\nYou have requested a $$serviceNameLower$$ one-time use code by admin: ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nThis code needs to be used in 10 minutes or it will expire.  All previous admin generated codes are now invalid.  For security reasons the code is not included in this email.  You can use this code to access ${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly} to generate 10 more codes which do not expire.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people adding a phone
emailAddPhoneSubject = $$institutionName$$ $$serviceNameLower$$ - you have added a phone
emailAddPhoneBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have added a phone application for $$serviceNameLower$$.\n\nYou can generate codes on exising phones or devices and this new phone or other device using Google Authenticator.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people who are selected as a friend
emailFriendSubject = $$institutionName$$ $$serviceNameLower$$ - you can help a friend
emailFriendBody = Dear ${twoFactorRequestContainer.twoFactorProfileContainer.twoFactorUserFriend.name},\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} has identified you as a friend who can help in case of trouble logging in using $$serviceNameLower$$.\n\nShould help be needed, ${twoFactorRequestContainer.twoFactorUserLoggedIn.name} will use a $$serviceNameLower$$ web page to authorize you to assist.\n\nIf you are contacted to provide help, please go to ${twoFactorRequestContainer.twoFactorConfigContainer.appUrlBase}twoFactorUi/app/UiMain.helpColleague and follow the instructions to opt someone out of the service.\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} can provide this URL again when contacting you for help.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people opted out by a friend
emailOptOutFriendSubject = $$institutionName$$ $$serviceNameLower$$ - you have been opted out by a friend
emailOptOutFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nYou have been opted out of $$serviceNameLower$$ at your request by ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nEach time you authenticate with your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people opted out by an admin
emailOptOutFriendSubject = $$institutionName$$ $$serviceNameLower$$ - you have been opted out by an administrator
emailOptOutFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nYou have been opted out of $$serviceNameLower$$ at your request by an administrator, ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nEach time you authenticate with your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people who are required to be opted in but arent
emailUsersRequiredToBeOptedInSubject = $$institutionName$$ $$serviceNameLower$$ - you are required to opt in
emailUsersRequiredToBeOptedInBody = Dear ${twoFactorRequestContainer.twoFactorWsRequestContainer.tfRestRequiredUser.name},\n\nAs part of your job responsibilities at $$institutionName$$, you are required to opt in to $$serviceNameLower$$.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n



###########################################
## Duo push
###########################################

# explanation of duo push
duoPushExplanation = Duo Mobile is an app that simplifies two-step verification &mdash; just tap "Approve" on the notice sent ("pushed") to the app on your phone or mobile device. Then, instead of entering a verification code, simply click a button on the $$institutionName$$ WebLogin screen to confirm that approval.<br /><br />Duo Mobile can also generate verification codes (like Google Authenticator). So you can use it even when your mobile device doesn't have access to an Internet connection or cell service.<br /><br />When enrolled in Duo Mobile, you can still use other two-step verification methods as well (printed codes, keychain fob, etc.).

#duo Doc url
duoDocUrl = http://somethingAtYourSchoolOverrideThis

# install test if not enrolled
duoPushExplanationInstall = <br /><br /><a class="tfLinkButton" style="font-size: smaller" href="$$duoDocUrl$$">Install the Duo Mobile app</a>

# button for duo push
buttonDuoPush = Duo Mobile

# if going to duo screen and not opted in
duoErrorNotOptedIn = Error: not opted in to $$serviceNameLower$$

# title on the reports index page
duoPushTitle = $$serviceNameCap$$ Duo Mobile

# subheader on duo page
duoPushSubheader = Manage Duo Mobile

# subheader if enrolling
duoPushSubheaderEnroll = Enroll in $$institutionName$$'s Duo Mobile pilot

# if has a phone for push
duoPushEnrolledText = You are enrolled in Duo Mobile.

# if has a phone for push
duoPushNotEnrolledText = You are not enrolled in Duo Mobile.

# test that duo push works
buttonDuoPushTest = Test Duo push feature

# error not enrolled in Duo push
duoErrorNotInPush = Error: you are not enrolled in Duo Mobile

# duo push worked
duoPushTestSuccess = Duo push test was successful

# duo push didnt work
duoPushTestFailure = Duo push test was not successful

# unenroll from duo push
buttonDuoPushUnenroll = Unenroll from $$institutionName$$'s Duo Mobile pilot

# enroll in duo push
buttonDuoPushEnroll = Enroll in $$institutionName$$'s Duo Mobile pilot

# enroll instructions before the QR code
duoPushEnrollInstructionsStart = To enroll in the Duo Mobile pilot, follow these steps:<br /><br /><b>Step 1 of 3:</b>  <a class="tfLinkButton" href="$$duoDocUrl$$">Install the Duo Mobile app</a><br /><br /><b>Step 2 of 3:</b> Activate the app.<br /><br /><div style="padding-left:5em">Open the app on your phone or device, tap "Add Account" (or the plus button) and scan this QR code:<br /><br /><br />

# enroll instructions after the QR code
duoPushEnrollInstructionsEnd = <br /><br />Do not store the QR code anywhere except in this device.</div><br /><b>Step 3 of 3:</b> <form action="../../twoFactorUi/app/UiMain.duoPushTest" method="post" style="display: inline"><input value="Test the activation" class="tfLinkButton" type="submit" /></form><br /><br /><div style="padding-left:5em">When you scan the QR code, Duo Mobile activates a $$institutionName$$ account for you and sends a "push" notice ("login request") to your device. You will see a message that a request is waiting.  Tap the message to reveal the notice, and then tap the "Approve" button.<br /><br />A success message should appear at the top of this page.<br /><br />Your enrollment is not complete until you test the activation.</div>

# use duo push for web
buttonDuoPushByDefaultForWeb = Use Duo push for web authentications

# dont use duo push for web 
buttonDuoPushDontByDefaultForWeb = Stop using Duo push for web authentications

# success message when unenrolled from duo
duoPushUnenrollSuccess = Success: you have been unenrolled from Duo Mobile

# error if enrolling but already enrolled
duoErrorAlreadyInPush = Error: you are already enrolled in Duo Mobile

# note at top of screen for push
duoPushEnrolling = Note: you are enrolled in Duo Mobile.  Scan the barcode with the Duo Mobile app.

# instructions for installing duo mobile
duoPushEnrollInstructions = Press the "Add Account" button in the Duo Mobile app and scan the QR image below.  Test your enrollment below when done. 

# instructions for Duo push for web
duoPushEnrolledInPushForWeb = Duo push is enabled for $$ssoSystemName$$. When you're prompted for $$serviceNameLower$$ from $$ssoSystemName$$, approve the request in the Duo Mobile app on your mobile device, and then click the "Confirm" button on the $$ssoSystemName$$ screen. Note: if you do not have your mobile device you can still use other single-use verification codes.

# not enrolled in duo push for web
duoPushNotEnrolledInPushForWeb = You have not enabled Duo push for $$ssoSystemName$$.  If you enable it, then when you are prompted for $$serviceNameLower$$ from $$ssoSystemName$$, approve the request in the Duo Mobile app on your mobile device, and then enter no code in the $$ssoSystemName$$ prompt.  Note, if you do not have your mobile device you can still use other $$codesName$$.

# unenroll from web authn duo push
buttonDuoPushUnenrollWeb = Unenroll from Duo push for $$ssoSystemName$$

# enroll in web authn duo push
buttonDuoPushEnrollWeb = Enroll in Duo push for $$ssoSystemName$$

# success message for duo push from two step
duoPushEnrollWebSuccess = Success: you are now enrolled in Duo push for $$ssoSystemName$$

# success message for no more duo push from two step
duoPushUnenrollWebSuccess = Success: you are now unenrolled from Duo push for $$ssoSystemName$$

# displayed to users in web transactions for duo push (before the word Request, default is "Login")
duoPushWebPrompt = Click 'Confirm' in the $$serviceNamePrefixLower$$ prompt
