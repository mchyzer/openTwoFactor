# The text config uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from the base file
# (which should not be edited), and the override overlays
# the base settings. See the twoFactor.text.en.us.base.properties for the possible
# settings that can be applied to the twoFactor.text.en.us.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:tfText/twoFactor.text.en.us.base.properties, file:c:/temp/tfText/twoFactor.text.en.us.properties
text.config.hierarchy = classpath:tfText/twoFactor.text.en.us.base.properties, classpath:tfText/twoFactor.text.en.us.properties

# seconds between checking to see if the config files are updated
text.config.secondsBetweenUpdateChecks = 60


## English language, US locale
## You can leave this file alone, and override in twoFactor.text.en.us.properties

############################################
## Common text
############################################

# SSO system name
ssoSystemName = WebLogin

# Name of the username
netId = NetID

# In H1's at the top of each page
pageHeader = $$ssoSystemName$$

# service name with first letter cap
serviceNameCap = Two-step verification

# service name lower case
serviceNameLower = two-step verification

# override this and put your institution name here, e.g. for Penn, we put: Penn
institutionName = Open Two Factor

# url to documentation about the service
docUrl = https://my.institution.edu/twostep/

# email address for support or feedback
supportEmailAddress = twostep-help@my.instition.edu

# name of the 6 digit code
codeName = single-use verification code

# name of the 6 digit codes
codesName = single-use verification codes

# simple yes or no
yes = yes
no = no

# buttons
buttonLogOut = Log out
buttonOptOut = Opt out
buttonOptOutConfirm = Are you sure you want to opt out?
buttonOptIn = Opt in
buttonProfile = Profile
buttonGenerateCodes = Generate codes
buttonUntrustBrowsers = Untrust browsers
buttonUntrustBrowsersConfirm = Are you sure you want to untrust all browsers?
buttonUntrustBrowsersNone = No trusted browsers found
buttonActivity = Activity
buttonHelpFriend = Help a friend
buttonAdminConsole = Admin console
buttonManageSettings = Manage settings
buttonHavingTrouble = I am having trouble logging in
buttonContinue = Continue
buttonSubmit = Submit
buttonEdit = Edit
buttonAdminHome = Admin home



# when searching in combobox, you need 2 or more characters
comboNotEnoughChars = Enter 2 or more characters for searching...

############################################
## Banner: commonBanner.jsp
############################################

# banner at top, url
bannerUrl = http://www.school.edu/

# switch this for your institution's image
bannerImageUrl = ../../assets/Open_Two_Factor2.gif

# alt of banner image
bannerImageAlt = University of School

# name of directory in institution
directoryName = directory

############################################
## Index page: twoFactorIndex.jsp
############################################

# title in browser on index page
indexTitle = $$serviceNameCap$$ settings

# subheader in bold if user is opted in
indexOptedInSubheader = $$serviceNameCap$$ settings

# subtext on index page if user is opted in
indexOptedInSubtext = Use buttons below to generate new $$codesName$$, view your recent $$serviceNameLower$$ activity, edit recovery contact details, help a friend, or opt out of $$serviceNameLower$$.

# subheader in bold if user is not opted in
indexNotOptedInSubheader = $$serviceNameCap$$

# text below subheader if user is not opted in
indexNotOptedInSubtext1 = Protect your $$netId$$ by using both your password and a code generated on your phone.

# link to opt in to two factor
indexNotOptedInLoginLink = Opt in to this service

# if not opted in, this is subtext
indexNotOptedInSubtext2 = <h4>How it works</h4><ol><li>Enter your PennKey and password as usual.</li><li>When prompted, enter a code from your phone or other device.</li><li>Make your browser trusted (optional). If no one else uses that browser, you only need to enter a code every 30 days.</li></ol><h4>Why you should use it</h4><br />$$serviceNameCap$$ dramatically reduces the risk of someone stealing your data and your Penn identity. Even if they acquire your password, they still can't log in unless they also have your device.

#############################################
## Common about: commonAbout.jsp at bottom of screen
#############################################

aboutUrl = $$docUrl$$

aboutLinkText = Learn more about $$serviceNameLower$$



#############################################
## Profile instructions: profileInstructions.jsp
#############################################

profileInstructionsOptedInTop = To opt in to this service you need a profile.<br /><br />You also need an email address of record in the $$directoryName$$.<br /><br />

profileInstructionsMain = We can use your email address to notify you of updates and remind you of your settings. If you have trouble logging in, we can send a $$codeName$$ to your phone.<br /><br />You can also identify one or more friends who may be authorized to opt you out of the service if you are having trouble logging in. To do so, enter a phone number or PennKey for each.<br /><br />You <b>must</b> have an email address in the $$directoryName$$ <b>and</b> choose at least two ways to help yourself in case of problems. So designate at least two phone numbers, two friends, or one of each.

#############################################
## Admin screen: admin.jsp
#############################################

# title at top of browser
adminTitle = $$serviceNameCap$$ admin

# subheader in bold below header
adminSubheader = $$serviceNameCap$$ admin

# person to manage label in admin screen
adminPersonToManage = Person to manage

# label next to the combobox to find the person to backdoor as
adminPersonToBackdoorAs = Person to backdoor as

# if the user is already enrolled, this will show the users name, then this text
adminIsAlreadyEnrolledInThisService = is currently enrolled in this service

# the button to opt out a user will say this text, then the user's name
adminOptOutPerson = Opt out

# confirm message prefix+suffix to see if admin really wants to opt out a user
adminOptOutConfirm = Are you sure you want to opt out ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name}?

# untrust browsers for user prefix for button to untrust
adminUntrustBrowsersFor = Untrust browsers for

# confirm message prefix+suffix for admin to untrust someone's browsers
adminUntrustConfirm = Are you sure you want untrust browsers for ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name}?

# username is not currently enrolled, everything but username
adminNotEnrolled = is not currently enrolled in this service.

# suffix if admin console but user is not an admin
adminErrorUserNotAdmin = ${twoFactorRequestContainer.twoFactorUserLoggedIn.name} is not an admin

# if operating on a user, and it is blank, this is the error
adminErrorUserToOperateOnIsRequired = You must specify a user

# note sure why this would happen since there is a combobox, but if the user is not found, this is the error
adminErrorUserToOperateOnNotFound = Person not found

# if someone picked from the combobox is not in the system (never opted in), this is error message suffix
adminErrorUserToOperateOnNotInSystem = ${twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name} has never opted in

# if opting out a user, but they weren't opted in, this is the message prefix+suffix. Note, not sure why this would happen.
adminErrorUserWasNotOptedIn = Warning: ${twoFactorRequestContainer.twoFactorAdminContainer.subjectOperatingOn.name} was not opted in to two factor

# when a user was opted out of two factor successfully, this is message suffix
adminOptOutUserSuccess = ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name} was opted out of two factor

# Success message suffix when untrusting browsewrs. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
adminUntrustBrowserSuccess = ${twoFactorRequestContainer.twoFactorAdminContainer.twoFactorUserOperatingOn.name}'s ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser(s) are now untrusted


##############################################
## Recent history: userAudits.jsp
##############################################

# title in browser
auditsTitle = $$serviceNameCap$$ history

# subtitle in bold below the header
auditsSubheader = $$serviceNameCap$$ history

# prefix before the name
auditsNamePrefix = Recent $$serviceNameLower$$ actions are shown for

#suffix after name
auditsNameSuffix = .

# paragraph 2 of audits page
auditsNameParagraph2 = Browser and operating system are reported by the browser.

# in audit console, actions displayed to user
auditsGenerateSingleUseCodes = Generate single-use codes
auditsSendCodeToPhone = Send code to a phone
auditsErrorAuthenticating = Error authenticating
auditsFriendOptedMeOut = Friend opts me out
auditsOptedOutFriend = Opt out a friend
auditsViewProfile = View profile
auditsEditProfile = Edit profile
auditsTwoStepAuthentication = $$serviceNameCap$$
auditsTwoStepAuthenticationForbidden = $$serviceNameCap$$ forbidden
auditsTwoStepAuthenticationRequired = $$serviceNameCap$$ required
auditsTrustedBrowserUse = Trusted browser use
auditsNonTwoStepAuthentication = Non-two-step verification
auditsOptIn = Opt in
auditsInviteFriendsToOptMeOut = Authorize friends to opt me out
auditsOptInStep1 = Opt in (step 1)
auditsOptOut = Opt out
auditsUntrustBrowsers = Untrust browsers
auditsWrongCode = Wrong verification code
auditsInvalidateSingleUseCodes = Invalidate single-use codes

############################################
## Audits include page: auditsInclude.jsp
############################################

# when there are no audits
auditsNoAudits = There are no recent audit records available.

# headers for audit table
auditsHeaderDate = Date
auditsHeaderAction = Action
auditsHeaderIpAddress = IP address
auditsHeaderDomainName = Domain name
auditsHeaderOperatingSystem = Operating system
auditsHeaderBrowser = Browser
auditsHeaderTrustedBrowser = Trusted browser?
auditsHeaderUserLoggedIn = User logged in
auditsHeaderDescription = Description


##############################################
## Show one time codes: showOneTimeCodes.jsp
##############################################

# title in browser, note, this is printed out, so you want the user to know what
# the codes are for. At Penn, we have: Penn two-step verification codes
codesTitle = $$institutionName$$ $$serviceNameLower$$ codes

# subtitle below the header
codesSubheader = $$serviceNameCap$$: generate codes

# paragraphs in codes page
codesParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ below to log in.

codesParagraph2 = Print the codes and instructions now using your browser, and keep them safe.

codesParagraph3 = You can use each code once, in sequence. If you forget which code you used last, enter any <b>two</b> unused codes in sequence (separated by a space). If you lose your printed codes, or use them all, go to the "Manage settings" page and click the "Generate codes" button to create a new set. Any previously unused codes will be invalidated.

# label above the codes
codesLabel = Currently valid codes:

# instructions on the printed paper for codes
codesPrintedInstructions = You can use each code once in sequence. If you<br /> forget which code you used last, enter any <b>two</b><br /> unused codes in sequence (separated by a space).

# can't show codes if not opted in, generally this will be seen by hackers only
codesErrorAlreadyOptedIn = You are not opted in!

########################################### 
## Having trouble logging in 
########################################### 

# on the having trouble screen, this is in bold below the header 
havingTroubleSubheader = $$serviceNameCap$$: trouble logging in 

# on the having trouble screen, descriptive text 
havingTroubleParagraph1 = Trouble logging in? You have three options:<br/ ><br /><ol class="bold"><li><b>Enter the next unused single-use code on the list you generated when you opted in to two-step verification.</b></li><br /><li><b>Send a single-use code to your backup phone:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# before the authorizing friends part
havingTroubleParagraph2 = </div></li><li><b>Authorize previously identified friends to opt you out of $$serviceNameLower$$:</b><div style="font-weight: normal; padding: 0; margin: 0;">

# after the friends part
havingTroubleParagraph2end = </div></li></ol>

# message saying the user is enrolled in the service 
havingTroubleEnrolled = You are currently enrolled in this service 

# having trouble voice label before the phone number 
havingTroubleVoicePrefix = Voice: 

# having trouble text label before the phone number 
havingTroubleTextPrefix = Text: 

# having trouble no phone numbers message 
havingTroubleNoPhoneNumbers = You have not entered any phone numbers, so you cannot get a single-use code by phone 

# Label for the list of friends someone has selected 
havingTroubleFriendAllowedToOptYouOut = You can authorize these friends to opt you out: 

# button text to authorize friend(s) to opt you out 
havingTroubleAllowFriendButton = Authorize friend(s) to opt you out 

# before the link to authorize friend(s), this is the text 
havingTroubleAllowFriendsPrefix = To be opted out of two-step verification, 

# to authorize friend(s), this is the link 
havingTroubleAllowFriendsLink = authorize your friend(s) to opt you out. 

# to allow friends, this is the suffix after the link 
havingTroubleAllowFriendsSuffix = Then call one of the firends listed above, ask them to log in to <span style="white-space: nowrap;">${twoFactorRequestContainer.twoFactorConfigContainer.appUrlFriendly}</span>, click "Manage settings" and then click "Help a friend" to opt you out. 

# if there are no friends who can opt the user out 
havingTroubleNoFriends = You have not identified anyone you can authorize to opt you out. 

# if the user is not enrolled in two factor 
havingTroubleNotEnrolled = You are not currently enrolled in this service. 

# success message for authorizing friends 
havingTroubleAuthSuccess = You have authorized friends to opt you out. 

#############################################
## Help friend screen: helpColleague.jsp
#############################################

# title at top of browser
helpFriendTitle = $$serviceNameCap$$: help a friend

# subheader in bold below header
helpFriendSubheader = $$serviceNameCap$$: help a friend

# first paragraph of text for help a friend
helpFriendParagraph1 = Anyone who enrolls in two-step verification may identify one or more friends who can be authorized to opt them out of the service. Should they ever be without a valid verification code, they can click "Trouble logging in?" from the Penn WebLogin screen and authorize their friends to opt them out. They may then contact one of their authorized friends to complete the process.

# second paragraph of text for help a friend
helpFriendParagraph2 = If you have been authorized to opt someone out of two-step verification, a button will appear below allowing you to do so. Should you receive a request, be sure to verify the requester's identity. Voice recognition is best; email can be forged.

# third paragraph of text for help a friend
helpFriendParagraph3 = The following people have authorized you to opt them out:

# third paragraph of text for help a friend
helpFriendListNotAuthorized = The following people have identified you as friends but have not yet authorized you to opt them out:

# prefix of button to opt out friend (the name will be after this)
helpFriendOptOutButtonPrefix = Opt out

# confirm message prefix+suffix when you want to opt someone out (insert name)
helpFriendOptOutConfirmPrefix = Are you sure you want to opt out
helpFriendOptOutConfirmSuffix = ?

# if no one has selected this person as a friend
helpFriendNoAuthorizedFriends = No one has identified you to be authorized to opt them out of $$serviceNameLower$$. 

# if no one has selected this person as a friend
helpFriendNoIdentifiedFriends = No one has identified you in their profile. 

# if the user selected hasn't allowed friends to opt them out. Generally only hackers will see this
helpFriendErrorUserDidntAllow = ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name} must authorize selected friends to opt them out.

# if the user selected hasnt selected this user as friend. Generally only hackers will see this
helpFriendErrorUserNotFriend = ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name} must authorize you to opt them out.

# this can happen if another friend opted them out or they got out some other way
helpFriendWarnNotOptedIn = ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name} was not currently opted in to $$serviceNameLower$$.

# prefix+suffix of success message after opting out friend (insert name)
helpFriendSuccess = Success: ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name} has been opted out of $$serviceNameLower$$.

# audit message description success before name
helpFriendAuditDescriptionPrefix = Opt out 

# audit message the friend will see before name
helpFriendAuditDescriptionForFriendPrefix = Opt-out by


##############################################
## Optin: optin.jsp
##############################################

# title bar in browser for optin screen
optinTitle = $$serviceNameCap$$ ${twoFactorRequestContainer.twoFactorUserLoggedIn.optedIn ? 'Reset enrollment' : 'Opt in'}

# subheader for opting in to two factor
optinSubheader = $$serviceNameCap$$ opt in

# step 1 description
optinStep1description = <b>Step 1 of 3:</b> <a href="http://support.google.com/accounts/bin/answer.py?hl=en&answer=1066447" target="_blank">Install Google Authenticator</a> in your mobile device.

# step 1 indented subdescription
optinStep1substep = Once activated, Google Authenticator will display a verification code that changes every two minutes.

# step 2 description
optinStep2description = <b>Step 2 of 3:</b> To activate, scan the <a href="#qrCode">QR code below</a> or enter this secret value into your device:

# prefix on link to show advanced stuff
optinStep2advancedPrefix = (Base 32, e.g. Google Authenticator.

# link to show advanced stuff
optinStep2advancedLink = Other options

# suffix on link to show advanced stuff
optinStep2advancedSuffix = )

# label on the hex secret
optinHexLabel = (Hex e.g. Yubikey)

# label to submit the custom secret (advanced)
optinStep2customSecretLabel = Custom secret

# buttom to submit custom secret
optinStep2submitCustomSecretButton = Submit custom secret

# description on advanced sumit secret token dialogue
optinStep2advancedCustomSecretDescription = (e.g. Deepnetsecurity keychain TOTP token, or any OATH TOTP 30 second or 60 second token, or HOTP start-at-index-0 token [not recommended]). Note: hex and base32 formats are accepted and auto-detected. You cannot opt in with an HOTP (sequential, not time-based) hardware token more than once.

# bottom of the step 2 part
optinStep2bottom = Do not store this QR code or secret value anywhere except in this device.

# description of 3rd step to optin
optinStep3description = <b>Step 3 of 3:</b> Test the activation.

# substep in step 3
optinStep3substep = Enter the digits displayed by Google Authenticator in response to step 2:

# step 3 code label
optinStep3codeLabel = Enter six digits

# step 3 code button submit
optinStep3codeButton = Test and continue

# at the bottom of step 3
optinStep3bottom = Your enrollment is not complete until you test the activation.

# cancel the optin process, go back to main two-step page
optinCancelButton = Cancel

# if things go wonky or hacker
optinSubmitErrorInconsistent = Inconsistent state, please start over.

# error if they submit without entering a code
optinErrorCodeRequired = Activation code required.

# error if they submit an invalid code
optinErrorCodeInvalid = Activation code invalid.

# if submitting a custom secret, then the textfield is required, this is the error message
optinErrorCustomSecretRequired = Custom secret is a required field.

# if submitting a custom secret, must be alphanueric or whitespace, if invalid chars, this is the error message
optinErrorCustomSecretInvalid = Invalid custom secret: should be alphanumeric or whitespace.

# not sure why this would happen, but custom secret has a minimum length, e.g. 6 chars
optinErrorCustomSecretNotLongEnough = Custom secret not long enough.

# if opting in, and email is required, this is the error message if the user doesn't have an email address
optinErrorEmailRequired = Email address required to opt-in.


##############################################
## Successful opt in: optinSuccess.jsp
##############################################

# after successfully opting in, this is the subheader below the header on the page
optinSuccessSubheader = $$serviceNameCap$$

# message after successfully opting in
optinSuccessMessage = You have successfully enrolled in $$serviceNameLower$$.

# paragraph 1 on optin success page
optinSuccessParagraph1 = <b>Note:</b> If your activated device is not available or not working, use one of the $$codesName$$ generated below to log in.

# paragraph 2 on optin success page
optinSuccessParagraph2 = <a href="../../twoFactorUi/app/UiMain.showOneTimeCodes">Generate a list of single-use codes and instructions</a> now using your browser. Print them and keep them with you in case you are without a working phone.


#############################################
## If opting out
#############################################

# if opting out and not opted in, this should only appear to hackers
optoutErrorNotOptedIn = Alert: you have not opted in to this service.

# just opted out message
optoutSuccessMessage = You have been opted out of $$serviceNameLower$$


#############################################
## Phone codes: nonTwoFactorPhoneCode.jsp
#############################################

# title at top of browser
phoneCodeTitle = $$serviceNameCap$$ phone code

# subheader in bold below header
phoneCodeSubheader = $$serviceNameCap$$ code sent to your phone

# paragraph for phone code sent to phone
phoneCodeParagraph1 = To use the code sent to your phone, navigate to a protected web resource and begin the log-in process again. After authenticating with your $$netId$$ and password, you will be prompted for a $$serviceNameLower$$ code, and you can enter the one sent to your phone. <br /><br/>You can also use the code to opt out of $$serviceNameLower$$. To do so, click the "Manage settings" link in the footer at the bottom of this page. When prompted for a $$serviceNameLower$$ code, enter the one on your phone. On the "Manage settings" page, click the button labeled "Opt out."


##############################################
## Profile edit screen: profile.jsp
##############################################

# title at top of browser
profileTitle = $$serviceNameCap$$ profile

# edit profile subheader below the header
profileSubheader = $$serviceNameCap$$ profile

# label for email field
profileEmailLabel = Email

# prefix of edit email link
profileEditEmailPrefix = (

# link to edit email address
profileEditEmailLinkUrl = https://medley.isc-seo.upenn.edu/directory/jsp/fast.do?fastStart=profile

# link text to edit email address
profileEditEmailLinkText = edit email address

# suffix of edit email link
profileEditEmailSuffix = )

# label for first phone number
profilePhoneNumberLabel1 = Phone number

# label for second phone number
profilePhoneNumberLabel2 = Phone number

# label for third phone number
profilePhoneNumberLabel3 = Phone number

# label for option of voice phone number
profilePhoneVoiceOptionLabel = Voice

# label for option of text phone number
profilePhoneTextOptionLabel = Text

# label for first friend
profileFriendLabel1 = Friend

# label for second friend
profileFriendLabel2 = Friend

# label for third friend
profileFriendLabel3 = Friend

# label for fourth friend
profileFriendLabel4 = Friend

# label for fifth friend
profileFriendLabel5 = Friend

# label for identifying the phone numbers
profileErrorLabelPhone1 = first phone number
profileErrorLabelPhone2 = second phone number
profileErrorLabelPhone3 = third phone number

# if submitting profile and not enough lifelines
profileErrorNotEnoughLifelines = You must specify at least two ways to help you if you are having problems logging in. You can enter two phone numbers, two friends, or one of each.

# if profile saved successfully
profileSuccessMessage = Your changes have been saved.

# error email is required
profileErrorEmailRequired = Email is required.

# error email is invalid
profileErrorEmailInvalid = Email is invalid.

# if a phone number has invalid chars
# the label is in ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel}
profileErrorPhoneInvalidChars = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} contains invalid characters. Please use only digits, space, plus, and dash.

# if a phone number is too short
# the label is in ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel}
profileErrorPhoneTooShort = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must be at least 10 digits.

# if there is a phone number then you need to check text or voice
profileErrorTextOrVoiceRequired = Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have text or voice checked.

# if there is something checked but no number
profileErrorNumberRequiredIfChecked= Error: the ${twoFactorRequestContainer.twoFactorProfileContainer.errorFieldLabel} must have a phone number entered if text or voice is checked.

#if one of the friends is invalid
profileErrorFriend1invalid = Error: the first friend was not found.  Please select a result from the combobox before saving the profile.
profileErrorFriend2invalid = Error: the second friend was not found.  Please select a result from the combobox before saving the profile.
profileErrorFriend3invalid = Error: the third friend was not found.  Please select a result from the combobox before saving the profile.
profileErrorFriend4invalid = Error: the fourth friend was not found.  Please select a result from the combobox before saving the profile.
profileErrorFriend5invalid = Error: the fifth friend was not found.  Please select a result from the combobox before saving the profile.

profileErrorFriendIsSelf = Error: you cannot select yourself as a friend

########################################
## Untrust browsers
########################################

# Not sure why a user would see this, only hackers
untrustBrowserErrorNotOptedIn = Warning: you were not opted in to two factor

# Success message when browsers are untrusted. The number of errors is in ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers}
untrustBrowserSuccess = Your ${twoFactorRequestContainer.twoFactorUntrustBrowserContainer.numberOfBrowsers} previously trusted browser(s) are now untrusted



#########################################
## Emails
#########################################

# Email subject and body sent to people who opt in
emailOptInSubject = $$serviceNameCap$$ - you have opted in
emailOptInBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nThank you for opting in to $$serviceNameLower$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will be routinely prompted for a $$codeName$$.\n\nYou can generate codes on your phone or other device using Google Authenticator.  Make sure you also print out single-use codes in case you don't have access to that device (on the "Manage settings" page, click "Generate codes.")\n\nRemember to keep your profile updated with backup phone numbers (to which single-use codes can be sent) and friends you can authorize to opt you out of the service if all else fails.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n

# Email subject and body sent to people who opt out
emailOptOutSubject = $$serviceNameCap$$ - you have opted out
emailOptOutBody = Dear ${twoFactorRequestContainer.twoFactorUserLoggedIn.name},\n\nYou have opted out of $$serviceNameLower$$.\n\nWhen you initiate a $$ssoSystemName$$ session using your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n



# Email subject and body sent to people who are selected as a friend
emailFriendSubject = $$serviceNameCap$$ - you can help a friend
emailFriendBody = Dear ${twoFactorRequestContainer.twoFactorProfileContainer.twoFactorUserFriend.name},\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} has identified you as a friend who can help in case of trouble logging in using $$serviceNameLower$$.\n\nIf you are contacted to provide help, please go to https://twostep-test.apps.upenn.edu/twoFactor/twoFactorUi/app/UiMain.helpColleague and follow the instructions to opt someone out of the service.\n\n${twoFactorRequestContainer.twoFactorUserLoggedIn.name} can repeat this URL when contacting you for help.\n\nFor more information about $$serviceNameLower$$, see: $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people opted out by a friend
emailOptOutFriendSubject = $$serviceNameCap$$ - you have been opted out by a friend
emailOptOutFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nYou have been opted out of $$serviceNameLower$$ at your request by ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nEach time you authenticate with your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


# Email subject and body sent to people opted out by an admin
emailOptOutFriendSubject = $$serviceNameCap$$ - you have been opted out by an administrator
emailOptOutFriendBody = Dear ${twoFactorRequestContainer.twoFactorHelpLoggingInContainer.twoFactorUserFriend.name}, \n\nYou have been opted out of $$serviceNameLower$$ at your request by an administrator, ${twoFactorRequestContainer.twoFactorUserLoggedIn.name}.\n\nEach time you authenticate with your $$netId$$ and password, you will no longer be routinely prompted for a $$codeName$$.\nYou can always opt in again at $$docUrl$$.\n\nFor more information about $$serviceNameLower$$, see $$docUrl$$.\n\nThanks!\nThe $$ssoSystemName$$ team.\n\n\n\nHelp us improve $$serviceNameLower$$. Send feedback to:\n$$supportEmailAddress$$\n\n


