

# The twoFactor server uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from twoFactor.server.base.properties
# (which should not be edited), and the twoFactor.server.properties overlays
# the base settings.  See the twoFactor.server.base.properties for the possible
# settings that can be applied to the twoFactor.server.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:twoFactor.server.example.properties, file:c:/something/myconfig.properties
twoFactorServer.config.hierarchy = classpath:twoFactor.server.base.properties, classpath:twoFactor.server.properties

# seconds between checking to see if the config files are updated
twoFactorServer.config.secondsBetweenUpdateChecks = 60

########################################
## HTTP settings
########################################

# comma separated http params that are used in authn or whatever that you dont want warnings about
twoFactorApiServer.httpParamsToIgnore =

# comma separated http params that are sent multiple but its ok (CSRFGuard does this for some reason)
twoFactorServer.httpParamsOkMultiple = OWASP_CSRFTOKEN

# comma separated cookie prefixes to be deleted on logout (to help log the user out)
twoFactorServer.logout.cookie.prefix = 

# if the app server is running on a private network behind a reverse proxy, then use this to get the real
# source IP and if secure (if offloaded ssl) (true|false)
twoFactorServer.autoProxyWrapper =

# url of the app with a slash at the end, e.g. https://twostep.apps.school.edu/twoStep/
twoFactorServer.appUrlBase = 

# url of the app that will redirect to the app, e.g. https://twostep.apps.school.edu
twoFactorServer.appUrlFriendly = 

########################################
## AUTHN / AUTHZ
########################################

# to provide custom authentication (instead of the default httpServletRequest.getUserPrincipal()
# for authentication.  Class must implement the interface:
# org.openTwoFactor.server.ws.rest.TfRestInvalidRequest.WsTfCustomAuthentication
# class must be fully qualified.  e.g. edu.school.whatever.MyAuthenticator
# blank means use default: org.openTwoFactor.server.ws.security.WsTfDefaultAuthentication
# kerberos: org.openTwoFactor.server.ws.security.WsTfKerberosAuthentication
ws.security.authentication.class = 

# for authorization, see if the caller is the TF server.
# construct the pairs of configs like this:
# ws.authz.tfServer.<someName>.principal = 
# ws.authz.tfServer.<someName>.networks = 

# ws.authz.tfServer.local.principal = mchyzer
# ws.authz.tfServer.local.networks = 127.0.0.1/32, 1.2.3.4/24

# ws.authz.tfServer.someName.principal = 
# ws.authz.tfServer.someName.networks = 



########################################
## Security settings
########################################

# how many bytes are in the generated secret
twoFactorServer.bytesInSecret = 10

# encrypt key
twoFactorServer.encryptKey = 

# how many seconds does TOTP pass change?  comma separated.  Note: google authenticator is 30, deepnetsecurity is 60
# note: only 30 and 60 are supported...
twoFactorServer.totpTimePeriodsInSeconds = 30, 60

# how many time periods in future to check
twoFactorServer.totp30PeriodsInPast = 8

# how many time periods in future to check
twoFactorServer.totp30PeriodsInFuture = 8

# how many time periods in future to check
twoFactorServer.totp60PeriodsInPast = 10

# how many time periods in future to check
twoFactorServer.totp60PeriodsInFuture = 10

# how many hotp secrets in future to check
twoFactorServer.hotpIndexesInFuture = 5

# how many hotp secrets in future to check for token
twoFactorServer.hotpTokenIndexesInFuture = 20

# how many hotp secrets separated by space or comma can be accepted
# e.g. if the user forgets which index, they can put in two
# separated by something, can be 2 or 3.  Enter 1 for dont do this
twoFactorServer.hotpSecretsAccepted = 2

# If you are entering multiple hotp secrets, then this is how far the
# index in the future should look
twoFactorServer.hotpSecretsMultipleIndexInFuture = 20

# If you are entering multiple hotp secrets, then this is how far the
# index in the future should look for tokens
twoFactorServer.hotpTokenSecretsMultipleIndexInFuture = 200

# number of hotp's shown on screen
twoFactorServer.hotpSecretsShownOnScreen = 20

# you need an account suffix for qr codes.  e.g. institution.edu    mutually exclusive with twoFactorServer.accountEl
twoFactorServer.accountSuffix = 

# you need an account suffix for qr codes.  e.g. institution.edu    mutually exclusive with twoFactorServer.accountSuffix
# e.g. ${subject.getAttributeValue('netId')}@test.school.edu
twoFactorServer.accountEl = 

# where the 1000 uuids are for encryption keys can be found, should be file: or classpath:
# Make this file by running the main in: org.openTwoFactor.server.encryption.GenerateKeys
# twoFactorServer.encryptKeyFileLocation = classpath:encryptKeysTest.properties
twoFactorServer.encryptKeyFileLocation = 

# sp factors that require two factor
twoFactorServer.factorsThatRequireTwoFactor =

# sp's that require two factor
twoFactorServer.serviceProviderIdsThatRequireTwoFactor = 

# sp's factors that do not use two factor even if the user is opted in
twoFactorServer.serviceProviderIdsThatForbidTwoFactor =

# false if totp passwords can be used only once (recommended true for better security)
twoFactorServer.totpPassesCanBeUsedOnlyOnce = true

# days that an invite of allow colleagues to opt out
twoFactorServer.hoursInviteColleaguesLast = 7

# admin loginids which are allowed to act as another user, do not enable this in production!
# to act as another user, use the URL ?tfBackdoorLoginName=jsmith
twoFactorServer.adminsAllowedToActAsOtherUsers =

# admin loginids which are allowed to email all users.  be careful when enabling this setting
twoFactorServer.adminsAllowedToEmailAllUsers = 

# admin loginids which are allowed to upload fob serial numbers.  be careful when enabling this setting
twoFactorServer.adminsAllowedToImportFobSerialNumbers = 

# admin loginids which are allowed to admin reports.  be careful when enabling this setting
twoFactorServer.adminsAllowedToAdminReports =

# admin loginids which are allowed to see admin reports.
twoFactorServer.adminsAllowedToSeeAdminReports =

# admin report name
twoFactorServer.adminReportName = 

# how long the phone code lasts in minutes=
twoFactorServer.phoneCodeLastsMinutes = 20

# if a WS tries to auto call / text in this many seconds, dont do it
twoSactorServer.ws.autoPhoneTextDontRepeatInSeconds = 10

# how long do trusted browser cookies last?
twoFactorServer.trustBrowserForDays = 30

# if trusted browser date should be reset on each use.  So if trusted for 30 days,
# it would be 30 days since last trust
twoFactorServer.browserTrustIsInactivityBased = true

# if users can register fobs with serial numbers
twoFactorServer.allowFobSerialRegistration = true

# should be a random string of chars at least 32 in length with at least 3 lower, upper, numeric, and non-alphanumeric
# you can run this to generate a good pass: org.openTwoFactor.server.encryption.TfSymmetricUtils generatePass
twoFactorServer.aes128keyBase32 = 

# how encryption works for two way symmetic encryption, implements: org.openTwoFactor.server.encryption.TfSymmetricEncryption
# org.openTwoFactor.server.encryption.TfSymmetricEncryptAesCbcPkcs5Padding is the most secure encryption method (default)
# org.openTwoFactor.server.encryption.TfSymmetricLegacyAesEncryption original method of encryption until May 2014
# if error, then Legacy.  This makes transitioning easier
twoFactorServer.symmetricEncryptionProvider = org.openTwoFactor.server.encryption.TfSymmetricEncryptAesCbcPkcs5Padding

# if client require two factor allow trusted browsers
twoFactorServer.clientRequireTwoFactorAllowTrustedBrowsers = false

# if enrollment should be checked by birthDate attribute of subject source
twoFactorServer.promptForBirthdayOnOptin = true

# if make sure not too many wrong bdays per day
twoFactorServer.maxWrongBdaysPerDayPerUser = 5

# if we should email users who have more than 5 wrong birthdays
twoFactorServer.emailUsersPassedThresholdOfWrongBirthdays = true

# bcc in the email to users who are required to be opted in who arent
twoFactorServer.emailUsersPassedThresholdOfWrongBirthdaysBcc =

# if opt some is enabled in the UI
twoFactorServer.optSomeEnabledUi = false

########################################
## Misc settings
########################################

# if the WS should run in this env
twoFactorServer.runWs = true

# if the UI should run in this env
twoFactorServer.runUi = true

# whatever the SSO logout URL is
twoFactorServer.logoutUrl = 

# temp dir for images and stuff
twoFactorServer.tempDir = 

# implement two factor logic, implements org.openTwoFactor.server.TwoFactorLogicInterface
twoFactorServer.twoFactorLogicImplementation = org.openTwoFactor.server.TwoFactorLogic

# implement two factor authz, implements org.openTwoFactor.server.TwoFactorAuthorizationInterface
#  org.openTwoFactor.server.TwoFactorAuthorization
#  org.openTwoFactor.server.TwoFactorGrouperAuthorization
twoFactorServer.twoFactorAuthzImplementation = org.openTwoFactor.server.TwoFactorGrouperAuthorization

# query to run for authz
twoFactorServer.twoFactorAuthzGrouperAuthorizationQuery = 

# timeout for authz
twoFactorServer.twoFactorAuthzGrouperTimeoutMinutes = 5

# if using the default config file based authz, this is the comma separated list of admin ids
twoFactorServer.admins = 

# how long to cache that someone is an admin
twoFactorServer.adminCacheMinutes = 2

# width of qr image
twoFactorServer.qrImageWidth = 400

# if all responses should have a debug field
twoFactorServer.debugAllRequests = false

# nsloookup location(s) for windows or non windows [unix/linux/mac] (can have multiple comma separated, first one that exists is used)
twoFactorServer.windows.nslookup = C:/Windows/System32/nslookup.exe
twoFactorServer.windows.nslookupRegex = .*Name:\\s+([^\\s]+).*
twoFactorServer.nonwindows.nslookup = /usr/bin/nslookup
twoFactorServer.nonwindows.nslookupRegex = .*in-addr\\.arpa\\s+name\\s+=\\s+([^\\s]+).*

# permanently delete deleted records after this many minutes (2880 is 2 days)
twoFactorServer.purgeDeletedRecordsAfterMinutes = 2880

# if the WS should log requests and responses to a file
twoFactorServer.ws.log.requestsResponses = false

# if log.requestsResponse is true, then list of netids to log
twoFactorServer.ws.log.requestsResponses.includes = 

# if log.requestsResponse is true, then list of netids to not log
twoFactorServer.ws.log.requestsResponses.excludes = 

# if the subject id should be in the log file name
twoFactorServer.ws.log.requestsResponsesLogSubjectId = true

# if the subject id in the file name should be a different attribute
twoFactorServer.ws.log.requestsResponsesLogSubjectAttribute = 

# if there should be a max number of registrations (though allow people to opt in who have been in before)
twoFactorServer.max.registrations =

# if there should be a list of people who can opt in even if the max registrations have been met
# can be a subjectId or a netId, comma separated
twoFactorServer.alwaysAllowed.registrationUserIds =

# user ids that should send errors
twoFactorServer.ws.sendErrorForUserIds =

# integer percent of time there is an error, e.g. 33  (defaults to 100)
twoFactorServer.ws.sendErrorForUserIdsPercentOfTime =

# user ids that should have a timeout
twoFactorServer.ws.sendTimeoutForUserIds =

# integer percent of time there is an timeout, e.g. 33 (defaults to 100)
twoFactorServer.ws.sendTimeoutForUserIdsPercentOfTime =

# number of millis the WS should sleep for certain user ids
twoFactorServer.ws.sendTimeoutForUserIdsMillis = 

# batch size of users to bcc while sending email to all users
twoFactorServer.emailAllUsersBatchSize = 20

# if there is not enough data in exceptions for sql, then log the "next" exception.
# generally this is just noise though...
twoFactorServer.logNextSqlException = false

# seconds that duo push calls in WS will timeout and return false.  -1 means no timeout
tfWsDuoPushTimeoutSeconds = 3

# if two factor should allow access on exceptions
twoFactorServer.ws.allowOnException = false

# set the API as readonly (e.g. for high availability).  Any updates will throw an exception
twoFactor.api.readonly = false

# if we should rate limit per user being checked (note, this happens per node in a cluster)
twoFactorServer.ws.rateLimit = true

# this should be just more than the expected rate the a user would authn (per node)
twoFactorServer.ws.rateLimitUserTxPerMinute = 10

# if we should ignore rate limit on users (note, this is the original username)
twoFactorServer.ws.ignoreRateLimitOnUsers = 

# if users can opt in by phone
twoFactorServer.canOptinByPhone = true

# if WS should send voice/text from WS sending in phone number
twoFactorServer.wsSendsPhoneCodesFromPhoneNumber = true

# if auto call / text should be enabled on WS
twoFactorServer.enableAutoCallText = true

# maximum number of auto calls texts per day per user
twoFactorServer.maxAutoCallsTextsPerDayPerUser = 15

# if admins can generate codes for users
twoFactorServer.allowAdminsToGenerateCodesforUsers = true

# blank in prod, dev bday in dev to speed up development
twoFactorServer.defaultBirthdayForTesting =

# if configured, then the relay must stat with this, comma separated
twoFactorServer.ws.relay.prefixes = 

# dont notify new colleagues as that just confuses and annoys people
twostep.notify.newColleagues = false

# dont allow these VIPs to be added as friends
twoStep.restrictFromFriends = 

########################################
## Require users to be opted in
########################################

# if we should not let users in who are required to be opted in, but who arent
# i.e. if this is true, send them to the two step page
twoFactorServer.ws.restrictUsersRequiredToBeOptedInWhoArentOptedIn = false

# if we should email users who arent opted in but who should be and remind them 
# to opt in
twoFactorServer.ws.emailUsersRequiredToBeOptedInWhoArentOptedIn = false

# if we should email users who arent opted in but who should be and remind them 
# to opt in every how many days
twoFactorServer.ws.emailUsersRequiredToBeOptedInWhoArentOptedInEveryDays = 1

# bcc in the email to users who are required to be opted in who arent
twoFactorServer.ws.emailUsersRequiredToBeOptedInWhoArentOptedInEveryDaysBcc =

# this should have a loginid, name, and email column
twoFactorServer.ws.restrictUsersQuery = 

# how many millis should this query be refreshed in cache (this is done in thread)
twoFactorServer.ws.restrictUsersQueryRefreshSeconds = 300

# put service provider ids (e.g. two factor registration) that dont require users who are required to be opted in
twoFactorServer.ws.serviceProviderIdsThatDontRequireUsersToOptIn = 

# dont require two factor source id for grouper
twoFactorServer.dontRequireTwoFactorGrouperSourceId = 

# dont require two factor source id for grouper if use subject id
twoFactorServer.dontRequireTwoFactorGrouperUseSubjectId = true

# dont require two factor source id for grouper if use subject identifier
twoFactorServer.dontRequireTwoFactorGrouperUseSubjectIdentifier = false

# dont require two factor source id for grouper group name
twoFactorServer.dontRequireTwoFactorGrouperNameOfGroup = 



########################################
## Subject settings
########################################

# set to true if there is an "admin" realm in the subject source
twoFactorServer.subject.useAdminRealm = false

# resolve UI logins against the subject source on login, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnUiLogin = true

# resolve backdoor UI logins against the subject source on login, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnUiBackdoorLogin = true

# resolve WS subjects against the subject source on WS call, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnWsSubject = true

# resolve WS subjects authenticating to the WS
twoFactorServer.subject.resolveOnWsLogin = false

# if filtering inactives in sources.xml
twoFactorServer.subject.filteringInactives = false

# if filtering inactives in sources.xml
#twoFactorServer.subject.activeStatus = T

# if filtering inactives in sources.xml
#twoFactorServer.subject.statusSubjectAttribute = active

# if the email is editable from the subject source
twoFactorServer.editableEmail = true

# if there is a netid, put that attribute here, can be used to show a more friendly representation of the user
twoFactorServer.subject.netIdAttribute = 

#########################################
## Daemon settings
#########################################

# if this is true, then dont run daemons here
twoFactorServer.dontRunDaemonsHere = false

# if we arent restricting daemons in twoFactorServer.dontRunDaemonsHere, then if server
# names are listed here, then only run on this server
twoFactorServer.runOnlyOnServerNames = 

#########################################
## Audit retention
## Actions are from TwoFactorAuditAction enum
## retentionDays is number of days to keep logs, or -1 for forever
#########################################

# 5:15 is default for clearing deleted items
twoFactorServer.TfDeletedClearingJob.quartzCron = 0 15 5 * * ?

# 5am is default time for audit retention daemon
twoFactorServer.TfAuditClearingJob.quartzCron = 0 0 5 * * ?

# 5am is default time for audit retention daemon
twoFactorServer.TfDeleteOldDaemonLogsJob.quartzCron = 0 30 5 * * ?

# each hour is default time for alias daemon
twoFactorServer.TfAliasJob.quartzCron = 0 0 * * * ?

twoFactorServer.TfAuditClearingJob.level1.actions = OPTIN_TWO_FACTOR, OPTOUT_TWO_FACTOR, ADD_PHONE, IMPORT_FOB_SERIALS, REGISTER_FOB_SERIAL_NUMBER, ADMIN_REPORT_EDIT, AUTO_CALL_TEXT_ENROLL, AUTO_CALL_TEXT_UNENROLL, REMOVE_FRIEND
twoFactorServer.TfAuditClearingJob.level1.retentionDays = -1

twoFactorServer.TfAuditClearingJob.level2.actions = GENERATE_PASSWORDS, INVALIDATE_PASSWORDS, OPTIN_TWO_FACTOR_STEP1, UNTRUST_BROWSERS, ADD_PHONE_TEST, REPORT_VIEW, AUTHN_ALLOW_WITH_ERROR
twoFactorServer.TfAuditClearingJob.level2.retentionDays = 60

twoFactorServer.TfAuditClearingJob.level3.actions = AUTHN_ERROR, AUTHN_NOT_OPTED_IN, AUTHN_TRUSTED_BROWSER, AUTHN_TWO_FACTOR, AUTHN_TWO_FACTOR_REQUIRED, AUTHN_WRONG_PASSWORD
twoFactorServer.TfAuditClearingJob.level3.retentionDays = 15

# if you dont want to audit certain things in the DB, put it here
twoFactorServer.dontAuditActions = AUTHN_NOT_OPTED_IN

###########################################
## Email reports
###########################################

# quartz cron for when this job should run
# 0 0 12 * * ?  everyday at noon
# 0 15 10 15 * ?  15th of the month at 10:15
#twoFactorServer.report.<name>.quartzCron = 

# query of the report, can be any number of rows / cols
#twoFactorServer.report.<name>.query =

# if emailing to people in the report, this is the column name of the email address
# will send one email to each person
#twoFactorServer.report.<name>.emailToColumn = COLUMN_NAME

# from has a default if not filled in
#twoFactorServer.report.<name>.from =

#twoFactorServer.report.<name>.tos =
#twoFactorServer.report.<name>.ccs =
#twoFactorServer.report.<name>.bccs =

#twoFactorServer.report.<name>.emailSubject =
#twoFactorServer.report.<name>.emailBody =

# you must use $date_time$ to subsitute the current date/time
# if you have a report file name, it will attach csv with this file name
#twoFactorServer.report.<name>.reportFileName = twoStepReport_$date_time$.csv

###########################################
## Contact stuff e.g. to contact users for a code
###########################################

# interface that can send voice calls or texts, implements org.openTwoFactor.server.contact.TwoFactorContactInterface
# e.g. org.openTwoFactor.server.contact.TwoFactorTwilio, org.openTwoFactor.server.contact.TwoFactorSmsmatrix
# e.g. org.openTwoFactor.server.contact.TwoFactorContactMultiple
twoFactorServer.contactInterfaceImplementation = 

# if the main implementation is org.openTwoFactor.server.contact.TwoFactorContactMultiple, then 
# this is the comma separated list of implementations.  They will be used in order, and
# if one fails or times out, then the next will be tried.
twoFactorServer.contact.multiple.contactInterfaceImplementations = org.openTwoFactor.server.contact.TwoFactorTwilio, org.openTwoFactor.server.contact.TwoFactorSmsmatrix

# timeout for a contact type if using multiple
twoFactorServer.contact.multiple.timeoutSeconds = 10

###########################################
## Twilio settings
###########################################

# twilio sid
twoFactorServer.twilio.sid = 

# twilio auth token
twoFactorServer.twilio.authToken = 

# from number for twilio must be valid for the account
twoFactorServer.twilio.fromNumber = 

###########################################
## SMSMatrix settings
###########################################

# smsmatrix endpoints, generally you dont need to change these
twoFactorServer.smsmatrix.textUrl = https://www.smsmatrix.com/matrix
twoFactorServer.smsmatrix.textToSpeechUrl = https://www.smsmatrix.com/matrix_tts

# username on account, is probably an email address
twoFactorServer.smsmatrix.user =

# password on account
twoFactorServer.smsmatrix.pass =

# from number for smsmatrix, not required, generally leave this blank.  Note, this only is applicable for textToSpeach
twoFactorServer.smsmatrix.fromNumber = 

###########################################
## Text bundles for UI
###########################################

# the default index
twoFactorServer.text.defaultBundleIndex = 0

# language for this bundle
twoFactorServer.text.bundle.0.language = en

# country for this bundle
twoFactorServer.text.bundle.0.country = us

# filename in the package tfText that is before the .base.properties, and .properties
twoFactorServer.text.bundle.0.fileNamePrefix = tfText/twoFactor.text.en.us


#####################################
## mail settings (optional, if not set then emails will not go out)
#####################################

# smtp server is a domain name or dns name.  set to "testing" if you want to log instead of send (e.g. for testing)
#mail.smtp.server = whatever.school.edu

# leave blank if unauthenticated
#mail.smtp.user = 

# leave blank if unauthenticated
#mail.smtp.pass = 

# leave blank or false for no ssl, true for ssl
#mail.smtp.ssl = 

# leave blank for default (probably 25), if ssl is true, default is 465, else specify
#mail.smtp.port = 

# this is the default email address where mail from grouper will come from
#mail.from.address = noreply@school.edu

# this is the subject prefix of emails, which will help differentiate prod vs test vs dev etc
#mail.subject.prefix = TEST:

# when running junit tests, this is the address that will be used
#mail.test.address = a@b.c

# if an email should be sent when someone opts in
mail.sendForOptin = true

# if someone or a security team or something should be bcc'ed during opt in, comma separated emails here
#mail.bcc.optins = a@b.c, b@c.d

# if an email should be sent when someone opts out, will be sent to person opting out
mail.sendForOptout = true

# if an email should be sent when someone adds a phone and their secret is displayed on the screen
mail.sendForAddPhone = true

# if someone or a security team or something should be bcc'ed during opt in, comma separated emails here
#mail.bcc.optouts = a@b.c, b@c.d

# if an email should be sent when someone opts out, will be sent to person opting out, and friend who did the opting out
mail.sendForOptoutFriend = true

# if someone or a security team or something should be bcc'ed during opt in, comma separated emails here
#mail.bcc.friendOptouts = a@b.c, b@c.d

# if an email should be sent when someone is opted out by an admin, will be sent to person opting out, and admin who did the opting out
mail.sendForOptoutByAdmin = true

# if an email should be sent when someone has a code generated by admin, will be sent to person getting code, and admin who did the generating
mail.sendForGenerateCodeByAdmin = true

# if someone or a security team or something should be bcc'ed during opt out, comma separated emails here
#mail.bcc.adminOptouts = a@b.c, b@c.d

# if someone or a security team or something should be bcc'ed during generate codes, comma separated emails here
#mail.bcc.adminGenerateCodes = a@b.c, b@c.d

# if an email should be sent when someone opts out, will be sent to person opting out, and person who did the opting out (friend? if applicable)
mail.sendForPhoneCode = true

# if someone or a security team or something should be bcc'ed someone sends a code to their phone, comma separated emails here
#mail.bcc.phoneCodes = a@b.c, b@c.d

# if an email should be sent when someone opts in
mail.sendForSelectFriend = true

# if someone or a security team or something should be bcc'ed when someone picks someone new for a friend, comma separated emails here
#mail.bcc.selectFriends = a@b.c, b@c.d

mail.bcc.optOutFriend

####################################################
## status servlet (hook up to monitoring software e.g. nagios)
####################################################

# bytes to allocate to see if server is out of memory
status.diagnostics.bytesToAllocate = 100000

# we will give it 52 hours... 48 (two days), plus 4 hours to run...
status.daemon.defaultMinutesSinceLastSuccess = 3120

#####################################################
## Check pass interface
#####################################################

# implementation to check pass, if not using duo, just use the DB checker.
# If using duo, you should use the Duo combo checker
# Must implement the interface: org.openTwoFactor.server.TwoFactorCheckPass
# org.openTwoFactor.server.TwoFactorCheckPassDb         is the default, uses the DB to check
# org.openTwoFactor.server.duo.DuoCheckPass             uses Duo to check
# org.openTwoFactor.server.TwoFactorCheckPassMultiple   can check multiple active/standby in a Duo specific way
twoFactorServer.checkPassInterfaceImplementation = org.openTwoFactor.server.TwoFactorCheckPassDb

# if the main implementation is org.openTwoFactor.server.TwoFactorCheckPassMultiple, then 
# this is the comma separated list of implementations.  They will be used in order, and
# if one fails or times out, then the next will be tried.
twoFactorServer.checkPass.multiple.implementations = org.openTwoFactor.server.duo.DuoCheckPass

# if using external checking (e.g. Duo), if we should use HOTP or phone on the DB implementation (will get counters out of sync)
twoFactorServer.checkPass.multiple.useHotpOnDbIfMultiple = false

# try db first if multiple org.openTwoFactor.server.TwoFactorCheckPassDb
twoFactorServer.checkPass.multiple.tryDbFirst = true

# timeout for a check pass if using multiple
twoFactorServer.checkPass.multiple.timeoutSeconds = 10


#####################################################
## Duo integration
#####################################################

# note, see the "check pass interface" for more duo settings

# if we should use Duo for code validations
duo.registerUsers = false

# if we should push by default if using Duo and users are configured to do this
duo.pushByDefaultEnabled = true

# how long does push last
duo.pushLastsForSeconds = 60

# domain name for duo for admin integration
duo.adminDomainName = 

# integration key for duo for admin integration
duo.adminIntegrationKey = 

# secret key for duo for admin integration
duo.adminSecretKey = 

# domain name for duo for auth integration
duo.authDomainName = 

# integration key for duo for auth integration
duo.authIntegrationKey = 

# secret key for duo for auth integration
duo.authSecretKey = 

# need something unique to identify tokens, e.g. pennprod, penntest for penn envs
duo.tokenInstitutionEnvironmentString = 

# delete the transaction id after it is used in the WS (if weblogin makes multiple calls might need this false)
duoDeletePushTransactionId = true

# after the push transaction id is used, it can be used again for this many seconds
# note, this is only used if duoDeletePushTransactionId is false
duoTransactionIdLastsAfterFirstUseSeconds = 3

# if users can control if they use duo for web
duo.allowUsersToControlDuoWeb = false

# log qr codes for debugging
twoStepLogQrCodesPath =

#####################################################
## Database settings
#####################################################

#if versioned, then see if we are disabling
dao.optimisticLocking = true


#####################################################
## Alias daemon
#####################################################

# if versioned, then see if we are disabling
aliasDaemonEnabled = false

# ldap url
aliasLdapUrl =

# if use ssl
aliasLdapUseSsl = true

# user filter for authn
aliasLdapUserFilter = (uid={user})

# user and pass to authenticate
aliasLdapUser = 
aliasLdapPass = 

# dn to get the aliases
aliasLdapAliasDn = 

# filter to get the aliases
aliasLdapAliasFilter = 

# the attribute to get the alias from ldap
aliasLdapAliasAttribute = 

# comma separated whitelist of aliases that shouldnt be removed from duo
aliasWhitelist = 