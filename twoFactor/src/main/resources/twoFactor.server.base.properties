

# The twoFactor server uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from twoFactor.server.base.properties
# (which should not be edited), and the twoFactor.server.properties overlays
# the base settings.  See the twoFactor.server.base.properties for the possible
# settings that can be applied to the twoFactor.server.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:twoFactor.server.example.properties, file:c:/something/myconfig.properties
twoFactorServer.config.hierarchy = classpath:twoFactor.server.base.properties, classpath:twoFactor.server.properties

# seconds between checking to see if the config files are updated
twoFactorServer.config.secondsBetweenUpdateChecks = 60

########################################
## HTTP settings
########################################

# comma separated http params that are used in authn or whatever that you dont want warnings about
twoFactorApiServer.httpParamsToIgnore =

########################################
## AUTHN / AUTHZ
########################################

# to provide custom authentication (instead of the default httpServletRequest.getUserPrincipal()
# for authentication.  Class must implement the interface:
# org.openTwoFactor.server.ws.rest.TfRestInvalidRequest.WsTfCustomAuthentication
# class must be fully qualified.  e.g. edu.school.whatever.MyAuthenticator
# blank means use default: org.openTwoFactor.server.ws.security.WsTfDefaultAuthentication
# kerberos: org.openTwoFactor.server.ws.security.WsTfKerberosAuthentication
ws.security.authentication.class = 

# for authorization, see if the caller is the TF server.
# construct the pairs of configs like this:
# ws.authz.tfServer.<someName>.principal = 
# ws.authz.tfServer.<someName>.networks = 

# ws.authz.tfServer.local.principal = mchyzer
# ws.authz.tfServer.local.networks = 127.0.0.1/32, 1.2.3.4/24

# ws.authz.tfServer.someName.principal = 
# ws.authz.tfServer.someName.networks = 



########################################
## Security settings
########################################

# how many bytes are in the generated secret
twoFactorServer.bytesInSecret = 10

# encrypt key to encrypt the secrets in the db
twoFactorServer.encryptKey = 

# how many seconds does TOTP pass change?  comma separated.  Note: google authenticator is 30, deepnetsecurity is 60
# note: only 30 and 60 are supported...
twoFactorServer.totpTimePeriodsInSeconds = 30, 60

# how many time periods in future to check
twoFactorServer.totp30PeriodsInPast = 8

# how many time periods in future to check
twoFactorServer.totp30PeriodsInFuture = 8

# how many time periods in future to check
twoFactorServer.totp60PeriodsInPast = 4

# how many time periods in future to check
twoFactorServer.totp60PeriodsInFuture = 4

# how many hotp secrets in future to check
twoFactorServer.hotpIndexesInFuture = 2

# how many hotp secrets in future to check for token
twoFactorServer.hotpTokenIndexesInFuture = 20

# how many hotp secrets separated by space or comma can be accepted
# e.g. if the user forgets which index, they can put in two
# separated by something, can be 2 or 3.  Enter 1 for dont do this
twoFactorServer.hotpSecretsAccepted = 2

# If you are entering multiple hotp secrets, then this is how far the
# index in the future should look
twoFactorServer.hotpSecretsMultipleIndexInFuture = 20

# If you are entering multiple hotp secrets, then this is how far the
# index in the future should look for tokens
twoFactorServer.hotpTokenSecretsMultipleIndexInFuture = 200

# number of hotp's shown on screen
twoFactorServer.hotpSecretsShownOnScreen = 20

# you need an account suffix for qr codes.  e.g. institution.edu
twoFactorServer.accountSuffix = 

# where the 1000 uuids are for encryption keys can be found, should be file: or classpath:
# Make this file by running the main in: org.openTwoFactor.server.encryption.GenerateKeys
# twoFactorServer.encryptKeyFileLocation = classpath:encryptKeysTest.properties
twoFactorServer.encryptKeyFileLocation = 

# sp factors that require two factor
twoFactorServer.factorsThatRequireTwoFactor =

# sp's that require two factor
twoFactorServer.serviceProviderIdsThatRequireTwoFactor =

# sp's factors that do not use two factor even if the user is opted in
twoFactorServer.serviceProviderIdsThatForbidTwoFactor =

# false if totp passwords can be used only once (recommended true for better security)
twoFactorServer.totpPassesCanBeUsedOnlyOnce = true

# days that an invite of allow colleagues to opt out
twoFactorServer.daysInviteColleaguesLast = 7

# admin loginids which are allowed to act as another user, do not enable this in production!
# to act as another user, use the URL ?tfBackdoorLoginId=jsmith
twoFactorServer.adminsAllowedToActAsOtherUsers =

# how long the phone code lasts in minutes
twoFactorServer.phoneCodeLastsMinutes = 10

########################################
## Misc settings
########################################

# whatever the SSO logout URL is
twoFactorServer.logoutUrl = 

# temp dir for images and stuff
twoFactorServer.tempDir = 

# implement two factor logic, implements org.openTwoFactor.server.TwoFactorLogicInterface
twoFactorServer.twoFactorLogicImplementation = org.openTwoFactor.server.TwoFactorLogic

# implement two factor authz, implements org.openTwoFactor.server.TwoFactorAuthorizationInterface
twoFactorServer.twoFactorAuthzImplementation = org.openTwoFactor.server.TwoFactorAuthorization

# if using the default config file based authz, this is the comma separated list of admin ids
twoFactorServer.admins = 

# how long to cache that someone is an admin
twoFactorServer.adminCacheMinutes = 2

# width of qr image
twoFactorServer.qrImageWidth = 400

# if all responses should have a debug field
twoFactorServer.debugAllRequests = false

# nsloookup location(s) for windows or non windows [unix/linux/mac] (can have multiple comma separated, first one that exists is used)
twoFactorServer.windows.nslookup = C:/Windows/System32/nslookup.exe
twoFactorServer.windows.nslookupRegex = .*Name:\\s+([^\\s]+).*
twoFactorServer.nonwindows.nslookup = /usr/bin/nslookup
twoFactorServer.nonwindows.nslookupRegex = .*in-addr\\.arpa\\s+name\\s+=\\s+([^\\s]+).*

# permanently delete deleted records after this many minutes (2880 is 2 days)
twoFactorServer.purgeDeletedRecordsAfterMinutes = 2880

########################################
## Subject settings
########################################

# resolve UI logins against the subject source on login, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnUiLogin = true

# resolve backdoor UI logins against the subject source on login, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnUiBackdoorLogin = true

# resolve WS subjects against the subject source on WS call, e.g. if the netId is not the subjectId
twoFactorServer.subject.resolveOnWsSubject = true

# resolve WS subjects authenticating to the WS
twoFactorServer.subject.resolveOnWsLogin = false

# if filtering inactives in sources.xml
twoFactorServer.subject.filteringInactives = false

# if filtering inactives in sources.xml
#twoFactorServer.subject.activeStatus = T

# if filtering inactives in sources.xml
#twoFactorServer.subject.statusSubjectAttribute = active

# if the email is editable from the subject source
twoFactorServer.editableEmail = true

#########################################
## Audit retention
## Actions are from TwoFactorAuditAction enum
## retentionDays is number of days to keep logs, or -1 for forever
#########################################

# 5:15 is default for clearing deleted items
twoFactorServer.TfDeletedClearingJob.quartzCron = 0 15 5 * * ?


# 5am is default time for audit retention daemon
twoFactorServer.TfAuditClearingJob.quartzCron = 0 0 5 * * ?

twoFactorServer.TfAuditClearingJob.level1.actions = OPTIN_TWO_FACTOR, OPTOUT_TWO_FACTOR
twoFactorServer.TfAuditClearingJob.level1.retentionDays = -1

twoFactorServer.TfAuditClearingJob.level2.actions = GENERATE_PASSWORDS, INVALIDATE_PASSWORDS, OPTIN_TWO_FACTOR_STEP1, UNTRUST_BROWSERS
twoFactorServer.TfAuditClearingJob.level2.retentionDays = 60

twoFactorServer.TfAuditClearingJob.level3.actions = AUTHN_ERROR, AUTHN_NOT_OPTED_IN, AUTHN_TRUSTED_BROWSER, AUTHN_TWO_FACTOR, AUTHN_TWO_FACTOR_REQUIRED, AUTHN_WRONG_PASSWORD
twoFactorServer.TfAuditClearingJob.level3.retentionDays = 15

###########################################
## Contact stuff e.g. to contact users for a code
###########################################

# interface that can send voice calls or texts, implements org.openTwoFactor.server.contact.TwoFactorContactInterface
# e.g. org.openTwoFactor.server.contact.TwoFactorTwilio, org.openTwoFactor.server.contact.TwoFactorSmsmatrix
# e.g. org.openTwoFactor.server.contact.TwoFactorContactMultiple
twoFactorServer.contactInterfaceImplementation = 

# if the main implementation is org.openTwoFactor.server.contact.TwoFactorContactMultiple, then 
# this is the comma separated list of implementations.  They will be used in order, and
# if one fails or times out, then the next will be tried.
twoFactorServer.contact.multiple.contactInterfaceImplementations = org.openTwoFactor.server.contact.TwoFactorTwilio, org.openTwoFactor.server.contact.TwoFactorSmsmatrix

# timeout for a contact type if using multiple
twoFactorServer.contact.multiple.timeoutSeconds = 10

###########################################
## Twilio settings
###########################################

# twilio sid
twoFactorServer.twilio.sid = 

# twilio auth token
twoFactorServer.twilio.authToken = 

# from number for twilio must be valid for the account
twoFactorServer.twilio.fromNumber = 

###########################################
## SMSMatrix settings
###########################################

# smsmatrix endpoints, generally you dont need to change these
twoFactorServer.smsmatrix.textUrl = https://www.smsmatrix.com/matrix
twoFactorServer.smsmatrix.textToSpeechUrl = https://www.smsmatrix.com/matrix_tts

# username on account, is probably an email address
twoFactorServer.smsmatrix.user =

# password on account
twoFactorServer.smsmatrix.pass =

# from number for smsmatrix, not required, generally leave this blank.  Note, this only is applicable for textToSpeach
twoFactorServer.smsmatrix.fromNumber = 

###########################################
## Text bundles for UI
###########################################

# the default index
twoFactorServer.text.defaultBundleIndex = 0

# language for this bundle
twoFactorServer.text.bundle.0.language = en

# country for this bundle
twoFactorServer.text.bundle.0.country = us

# filename in the package tfText that is before the .base.properties, and .properties
twoFactorServer.text.bundle.0.fileNamePrefix = tfText/twoFactor.text.en.us



