/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.openTwoFactor.clientExt.org.apache.commons.jexl2.parser;


/**
 * Token literal values and constants.
 * Generated by org.openTwoFactor.clientExt.org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int FOR = 11;
  /** RegularExpression Id. */
  int FOREACH = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int NEW = 14;
  /** RegularExpression Id. */
  int EMPTY = 15;
  /** RegularExpression Id. */
  int SIZE = 16;
  /** RegularExpression Id. */
  int NULL = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int IN = 20;
  /** RegularExpression Id. */
  int LPAREN = 21;
  /** RegularExpression Id. */
  int RPAREN = 22;
  /** RegularExpression Id. */
  int LCURLY = 23;
  /** RegularExpression Id. */
  int RCURLY = 24;
  /** RegularExpression Id. */
  int LBRACKET = 25;
  /** RegularExpression Id. */
  int RBRACKET = 26;
  /** RegularExpression Id. */
  int SEMICOL = 27;
  /** RegularExpression Id. */
  int COLON = 28;
  /** RegularExpression Id. */
  int COMMA = 29;
  /** RegularExpression Id. */
  int DOT = 30;
  /** RegularExpression Id. */
  int QMARK = 31;
  /** RegularExpression Id. */
  int ELVIS = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int eq = 35;
  /** RegularExpression Id. */
  int ne = 36;
  /** RegularExpression Id. */
  int req = 37;
  /** RegularExpression Id. */
  int rne = 38;
  /** RegularExpression Id. */
  int gt = 39;
  /** RegularExpression Id. */
  int ge = 40;
  /** RegularExpression Id. */
  int lt = 41;
  /** RegularExpression Id. */
  int le = 42;
  /** RegularExpression Id. */
  int assign = 43;
  /** RegularExpression Id. */
  int mod = 44;
  /** RegularExpression Id. */
  int div = 45;
  /** RegularExpression Id. */
  int not = 46;
  /** RegularExpression Id. */
  int plus = 47;
  /** RegularExpression Id. */
  int minus = 48;
  /** RegularExpression Id. */
  int mult = 49;
  /** RegularExpression Id. */
  int tilda = 50;
  /** RegularExpression Id. */
  int and = 51;
  /** RegularExpression Id. */
  int or = 52;
  /** RegularExpression Id. */
  int xor = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int REGISTER = 57;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 58;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 59;
  /** RegularExpression Id. */
  int STRING_LITERAL = 60;

  /** Lexical state. */
  int REGISTERS = 0;
  /** Lexical state. */
  int FOR_EACH_IN = 1;
  /** Lexical state. */
  int DEFAULT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"foreach\"",
    "\"while\"",
    "\"new\"",
    "\"empty\"",
    "\"size\"",
    "\"null\"",
    "\"true\"",
    "\"false\"",
    "\"in\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"?\"",
    "\"?:\"",
    "<AND>",
    "<OR>",
    "<eq>",
    "<ne>",
    "\"=~\"",
    "\"!~\"",
    "<gt>",
    "<ge>",
    "<lt>",
    "<le>",
    "\"=\"",
    "<mod>",
    "<div>",
    "<not>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"~\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<REGISTER>",
    "<INTEGER_LITERAL>",
    "<FLOAT_LITERAL>",
    "<STRING_LITERAL>",
  };

}
